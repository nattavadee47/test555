// ========================================
// ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏°‡∏≠‡∏á‡πÅ‡∏ï‡∏Å (Stroke)
// ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å - main.js (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)
// ========================================

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
let poseDetection = null;
let camera = null;
let isDetecting = false;
let sessionStartTime = null;
let timerInterval = null;
let elapsedSeconds = 0;

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á
let poseResults = null;
let currentExercise = '';
let currentCategory = 'warmup';
let currentAngle = 0;
let prevAngle = 0;
let movementPhase = 'rest';

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
let repCounter = 0;
let setCounter = 1;
let exerciseCount = 0;
let targetReps = 10;
let targetSets = 2;
let exerciseHistory = [];
let lastRepTime = 0;

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
let autoDetectedSide = 'both';
let bothSidesData = {
    left: { angle: 0, quality: 0, movement: 0, totalQuality: 0 },
    right: { angle: 0, quality: 0, movement: 0, totalQuality: 0 }
};

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
let angleHistory = [];
let movementThreshold = 5;
let stabilityCounter = 0;

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
let realtimeDisplayEnabled = false;
let angleUpdateInterval = null;

// ‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö DOM - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
const videoElement = document.querySelector('#input-video');
const canvasElement = document.querySelector('#output-canvas');
const canvasCtx = canvasElement ? canvasElement.getContext('2d') : null;
const startButton = document.querySelector('#start-btn');
const feedbackText = document.querySelector('#feedback-text');
const repCountElement = document.getElementById('rep-counter');
const timeElement = document.getElementById('timer-display');
const accuracyElement = document.getElementById('accuracy-value');
const scoreElement = document.getElementById('score-display');

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ DOM ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
const instructionText = feedbackText; // ‡πÉ‡∏ä‡πâ feedback-text ‡πÄ‡∏õ‡πá‡∏ô instruction text
const progressFillElement = document.getElementById('progress-fill');
const detectionStatusElement = document.getElementById('detection-status');
const realtimeInfoElement = document.getElementById('realtime-info');

// ‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤
const exerciseSelect = document.getElementById('exercise-select');

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö DOM elements
// ========================================
function checkDOMElements() {
    const requiredElements = {
        'video element': videoElement,
        'canvas element': canvasElement,
        'start button': startButton,
        'feedback text': feedbackText,
        'exercise select': exerciseSelect
    };
    
    const missingElements = [];
    Object.entries(requiredElements).forEach(([name, element]) => {
        if (!element) {
            missingElements.push(name);
        }
    });
    
    if (missingElements.length > 0) {
        console.error('‚ùå ‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ:', missingElements);
        showError(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: ${missingElements.join(', ')}`);
        return false;
    }
    
    return true;
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
// ========================================

window.onload = function() {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î Stroke...');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö DOM elements ‡∏Å‡πà‡∏≠‡∏ô
    if (!checkDOMElements()) {
        return;
    }
    
    loadMediaPipeLibraries().then(() => {
        console.log("‚úÖ MediaPipe libraries ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        initializeSystem();
    }).catch(error => {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î MediaPipe libraries:", error);
        showError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà");
    });
};

function loadMediaPipeLibraries() {
    return new Promise((resolve, reject) => {
        if (window.Pose && window.Camera && window.drawConnectors) {
            resolve();
            return;
        }

        const scripts = [
            'https://cdn.jsdelivr.net/npm/@mediapipe/camera_utils@0.3.1640029074/camera_utils.js',
            'https://cdn.jsdelivr.net/npm/@mediapipe/control_utils@0.6.1629159505/control_utils.js', 
            'https://cdn.jsdelivr.net/npm/@mediapipe/drawing_utils@0.3.1640029074/drawing_utils.js',
            'https://cdn.jsdelivr.net/npm/@mediapipe/pose@0.5.1635988162/pose.js'
        ];

        let loadedCount = 0;
        let hasError = false;

        scripts.forEach((src) => {
            const script = document.createElement('script');
            script.src = src;
            script.crossOrigin = 'anonymous';
            
            script.onload = () => {
                loadedCount++;
                console.log(`‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${src.split('/').pop()}`);
                if (loadedCount === scripts.length && !hasError) {
                    setTimeout(() => {
                        if (window.Pose && window.Camera) {
                            resolve();
                        } else {
                            reject(new Error('‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'));
                        }
                    }, 1000);
                }
            };
            
            script.onerror = (error) => {
                hasError = true;
                console.error(`‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${src}`);
                reject(new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î: ${src}`));
            };
            
            document.head.appendChild(script);
        });
    });
}

function initializeSystem() {
    console.log('üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö...');
    
    setupEventListeners();
    setupPoseDetection();
    updateUI();
    
    console.log('‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Listeners
// ========================================

function setupEventListeners() {
    console.log('üéØ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Listeners...');
    
    // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å
    if (startButton) {
        startButton.addEventListener('click', toggleExercise);
    }

    // ‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤
    if (exerciseSelect) {
        exerciseSelect.addEventListener('change', function() {
            if (this.value) {
                currentExercise = this.value;
                resetExerciseState();
                updateExerciseInstructions();
                
                // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°
                if (startButton) {
                    startButton.disabled = false;
                    startButton.innerHTML = '<i class="fas fa-play"></i> ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö';
                }
                
                console.log(`üìù ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤: ${this.value}`);
                showFeedback(`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤: ${getExerciseName(this.value)}`);
            }
        });
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° keyboard shortcuts
    document.addEventListener('keydown', handleKeyboardShortcuts);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á
    checkCameraPermissions();
}

function handleKeyboardShortcuts(event) {
    if (event.target.tagName.toLowerCase() === 'input' || 
        event.target.tagName.toLowerCase() === 'textarea' || 
        event.target.tagName.toLowerCase() === 'select') {
        return;
    }
    
    switch (event.key.toLowerCase()) {
        case ' ':
            event.preventDefault();
            toggleExercise();
            break;
        case 'r':
            event.preventDefault();
            if (confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
                resetExerciseState();
            }
            break;
    }
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MediaPipe Pose Detection
// ========================================

function setupPoseDetection() {
    if (!checkDependencies()) return;

    try {
        console.log('üé• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MediaPipe Pose Detection...');
        
        poseDetection = new window.Pose({
            locateFile: (file) => {
                return `https://cdn.jsdelivr.net/npm/@mediapipe/pose@0.5.1635988162/${file}`;
            }
        });

        poseDetection.setOptions({
            modelComplexity: 1,
            smoothLandmarks: true,
            enableSegmentation: false,
            minDetectionConfidence: 0.5,
            minTrackingConfidence: 0.5,
            selfieMode: true
        });

        poseDetection.onResults(onPoseResults);
        
        setupCamera();

    } catch (error) {
        console.error('‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MediaPipe:', error);
        showError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á');
    }
}

function setupCamera() {
    if (!videoElement) {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö video element');
        return;
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
    updateDetectionStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á...');

    try {
        camera = new window.Camera(videoElement, {
            onFrame: async () => {
                if (poseDetection && videoElement.videoWidth > 0) {
                    await poseDetection.send({ image: videoElement });
                }
            },
            width: 640,
            height: 480
        });

        camera.start()
            .then(() => {
                console.log('‚úÖ ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                updateStartButton(true);
                setupCameraCanvas();
                showVideoContainer();
                updateDetectionStatus('‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
                showFeedback('‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢');
            })
            .catch(error => {
                console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ:', error);
                updateDetectionStatus('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á');
                showError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå');
                showCameraInstructions();
            });

    } catch (error) {
        console.error('‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á:', error);
        updateDetectionStatus('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á');
        showError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á');
        showCameraInstructions();
    }
}

function onPoseResults(results) {
    poseResults = results;
    
    if (results.poseLandmarks) {
        calculateRealtimeAngles(results.poseLandmarks);
        detectBestSideAutomatically(results.poseLandmarks);
        updateDetectionStatus('‡∏û‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡∏†‡∏≤‡∏û', 'detected');
    } else {
        updateDetectionStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡∏†‡∏≤‡∏û...', 'waiting');
    }

    drawPoseResults();
    
    if (isDetecting && currentExercise) {
        analyzeCurrentExercise();
    }
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
// ========================================

function updateDetectionStatus(message, status = 'waiting') {
    if (detectionStatusElement) {
        detectionStatusElement.textContent = message;
        detectionStatusElement.className = `detection-status ${status}`;
    }
}

function updateStartButton(enabled) {
    if (startButton) {
        startButton.disabled = !enabled;
        if (enabled) {
            startButton.innerHTML = '<i class="fas fa-play"></i> ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö';
        } else {
            startButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°...';
        }
    }
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å
// ========================================

function toggleExercise() {
    if (!isDetecting) {
        startExercise();
    } else {
        stopExercise();
    }
}

function startExercise() {
    if (!poseDetection || !camera) {
        showError('‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà');
        return;
    }

    if (!currentExercise) {
        showError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ù‡∏∂‡∏Å');
        return;
    }

    isDetecting = true;
    sessionStartTime = new Date();
    startTimer();
    resetExerciseState();
    
    if (startButton) {
        startButton.innerHTML = '<i class="fas fa-stop"></i> ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å';
        startButton.classList.add('btn-accent');
    }
    
    showFeedback(`‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å: ${getExerciseName(currentExercise)}`);
    updateDetectionStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á...', 'detecting');
    
    logExerciseEvent('‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô', `‡∏ó‡πà‡∏≤: ${getExerciseName(currentExercise)}`);
}

function stopExercise() {
    isDetecting = false;
    clearInterval(timerInterval);
    
    if (startButton) {
        startButton.innerHTML = '<i class="fas fa-play"></i> ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å';
        startButton.classList.remove('btn-accent');
    }
    
    showFeedback('‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß');
    updateDetectionStatus('‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
    
    if (sessionStartTime) {
        const duration = Math.round((new Date() - sessionStartTime) / 1000);
        logExerciseEvent('‡∏à‡∏ö‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô', `‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: ${formatTime(duration)}`);
        saveExerciseSession();
    }
}

function resetExerciseState() {
    repCounter = 0;
    setCounter = 1;
    exerciseCount = 0;
    movementPhase = 'rest';
    currentAngle = 0;
    prevAngle = 0;
    lastRepTime = 0;
    stabilityCounter = 0;
    
    bothSidesData = {
        left: { angle: 0, quality: 0, movement: 0, totalQuality: 0 },
        right: { angle: 0, quality: 0, movement: 0, totalQuality: 0 }
    };
    
    angleHistory = [];
    updateCounters();
    updateUI();
    
    console.log('üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
// ========================================

function checkDependencies() {
    const requiredObjects = ['Pose', 'Camera'];
    const missing = [];
    
    requiredObjects.forEach(obj => {
        if (typeof window[obj] === 'undefined') {
            missing.push(obj);
        }
    });
    
    if (missing.length > 0) {
        console.error('‚ùå Missing MediaPipe dependencies:', missing);
        showError(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: ${missing.join(', ')}`);
        return false;
    }
    
    if (!videoElement || !canvasElement) {
        console.error('‚ùå Missing DOM elements: video or canvas');
        showError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö video ‡∏´‡∏£‡∏∑‡∏≠ canvas');
        return false;
    }
    
    return true;
}

function checkCameraPermissions() {
    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
        navigator.mediaDevices.getUserMedia({ video: true })
            .then(stream => {
                console.log('‚úÖ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á');
                stream.getTracks().forEach(track => track.stop());
            })
            .catch(error => {
                console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á:', error);
                showCameraInstructions();
            });
    } else {
        console.warn('‚ö†Ô∏è ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á');
        showError('‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á');
    }
}

function showCameraInstructions() {
    const instructions = `
        <div class="camera-instructions">
            <h3>‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á:</h3>
            <ol>
                <li>‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô address bar</li>
                <li>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï" ‡∏´‡∏£‡∏∑‡∏≠ "Allow"</li>
                <li>‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö</li>
            </ol>
            <p>‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå ‚Üí ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‚Üí ‡∏Å‡∏•‡πâ‡∏≠‡∏á ‚Üí ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ô‡∏µ‡πâ</p>
        </div>
    `;
    
    if (feedbackText) {
        feedbackText.innerHTML = instructions;
    }
}

function showVideoContainer() {
    const setupPhase = document.getElementById('setup-phase');
    const videoContainer = document.getElementById('video-container');
    
    if (setupPhase) setupPhase.style.display = 'none';
    if (videoContainer) videoContainer.style.display = 'block';
}

function setupCameraCanvas() {
    if (!canvasElement || !videoElement) {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö canvas ‡∏´‡∏£‡∏∑‡∏≠ video element');
        return;
    }

    console.log('üé® ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Canvas...');

    const updateCanvasSize = () => {
        if (videoElement.videoWidth > 0 && videoElement.videoHeight > 0) {
            canvasElement.width = videoElement.videoWidth;
            canvasElement.height = videoElement.videoHeight;
            
            canvasElement.style.width = '100%';
            canvasElement.style.height = 'auto';
            canvasElement.style.maxHeight = '400px';
            
            console.log(`‚úÖ Canvas ‡∏Ç‡∏ô‡∏≤‡∏î: ${canvasElement.width}x${canvasElement.height}`);
        } else {
            setTimeout(updateCanvasSize, 100);
        }
    };
    
    updateCanvasSize();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°...
function drawPoseResults() {
    if (!canvasCtx || !poseResults) return;
    
    try {
        canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);
        
        if (videoElement && videoElement.videoWidth > 0) {
            canvasCtx.drawImage(videoElement, 0, 0, canvasElement.width, canvasElement.height);
        }
        
        if (poseResults.poseLandmarks) {
            drawPoseConnections();
            drawAllLandmarks();
            drawExerciseInfo();
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Error in drawPoseResults:', error);
    }
}

function drawPoseConnections() {
    if (!window.drawConnectors || !window.POSE_CONNECTIONS) return;
    
    try {
        window.drawConnectors(canvasCtx, poseResults.poseLandmarks, 
            window.POSE_CONNECTIONS, {
                color: '#00FF00', 
                lineWidth: 2
            });
    } catch (error) {
        console.warn('‚ö†Ô∏è Error drawing connectors:', error);
    }
}

function drawAllLandmarks() {
    if (!window.drawLandmarks) return;
    
    try {
        window.drawLandmarks(canvasCtx, poseResults.poseLandmarks, {
            color: '#FF0000', 
            lineWidth: 1, 
            radius: 3
        });
    } catch (error) {
        console.warn('‚ö†Ô∏è Error drawing landmarks:', error);
    }
}

function drawExerciseInfo() {
    if (!canvasCtx) return;
    
    try {
        canvasCtx.font = '16px Kanit, Arial, sans-serif';
        canvasCtx.fillStyle = '#FFFFFF';
        canvasCtx.strokeStyle = '#000000';
        canvasCtx.lineWidth = 3;
        
        let yPosition = 30;
        
        if (currentExercise) {
            const exerciseText = `‡∏ó‡πà‡∏≤: ${getExerciseName(currentExercise)}`;
            drawTextWithOutline(exerciseText, 10, yPosition);
            yPosition += 25;
        }
        
        if (currentAngle > 0 && movementPhase !== 'rest') {
            const angleText = `‡∏°‡∏∏‡∏°: ${Math.round(currentAngle)}¬∞`;
            drawTextWithOutline(angleText, 10, yPosition);
            yPosition += 25;
        }
        
        if (movementPhase !== 'rest') {
            const phaseText = `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${getPhaseDisplayName(movementPhase)}`;
            drawTextWithOutline(phaseText, 10, yPosition);
            yPosition += 25;
        }
        
        if (repCounter > 0) {
            const repText = `‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà: ${repCounter}/${targetReps}`;
            drawTextWithOutline(repText, 10, yPosition);
        }
        
    } catch (error) {
        console.warn('‚ö†Ô∏è Error drawing exercise info:', error);
    }
}

function drawTextWithOutline(text, x, y) {
    canvasCtx.strokeText(text, x, y);
    canvasCtx.fillText(text, x, y);
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏°
// ========================================

function startTimer() {
    if (timerInterval) clearInterval(timerInterval);
    
    elapsedSeconds = 0;
    timerInterval = setInterval(() => {
        elapsedSeconds++;
        if (timeElement) {
            timeElement.textContent = formatTime(elapsedSeconds);
        }
    }, 1000);
}

function formatTime(totalSeconds) {
    const minutes = Math.floor(totalSeconds / 60);
    const seconds = totalSeconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}

function getExerciseName(exerciseCode) {
    const exerciseNames = {
        'ArmRaiseForward': '‡∏ó‡πà‡∏≤‡∏¢‡∏Å‡πÅ‡∏Ç‡∏ô‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤',
        'KneeExtension': '‡∏ó‡πà‡∏≤‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡πÄ‡∏Ç‡πà‡∏≤‡∏ï‡∏£‡∏á',
        'TrunkSway': '‡∏ó‡πà‡∏≤‡πÇ‡∏¢‡∏Å‡∏•‡∏≥‡∏ï‡∏±‡∏ß‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤',
        'NeckTiltFixed': '‡∏ó‡πà‡∏≤‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏®‡∏µ‡∏£‡∏©‡∏∞‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤'
    };
    return exerciseNames[exerciseCode] || exerciseCode;
}

function getPhaseDisplayName(phase) {
    const phaseNames = {
        'lifting': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏Å',
        'lowering': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏î',
        'flexing': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏á‡∏≠',
        'extending': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î',
        'spreading': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏á',
        'closing': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏∏‡∏ö',
        'reaching': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏≠‡∏∑‡πâ‡∏≠‡∏°',
        'bending': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡πâ‡∏°',
        'tilting': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏≠‡∏µ‡∏¢‡∏á',
        'holding': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏á‡∏ó‡πà‡∏≤',
        'returning': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°'
    };
    return phaseNames[phase] || phase;
}

function updateExerciseInstructions() {
    const exerciseInstructions = {
        'ArmRaiseForward': '‡∏¢‡∏Å‡πÅ‡∏Ç‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏Ç‡∏ô‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏•‡∏á‡∏ä‡πâ‡∏≤‡πÜ',
        'KneeExtension': '‡∏ô‡∏±‡πà‡∏á‡∏ö‡∏ô‡πÄ‡∏Å‡πâ‡∏≤‡∏≠‡∏µ‡πâ ‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡πÄ‡∏Ç‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏á ‡∏Ñ‡∏á‡∏ó‡πà‡∏≤‡πÑ‡∏ß‡πâ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
        'TrunkSway': '‡πÇ‡∏¢‡∏Å‡∏•‡∏≥‡∏ï‡∏±‡∏ß‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤ ‡∏Ç‡∏≤‡∏ô‡∏±‡πà‡∏á‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á‡∏ö‡∏ô‡πÄ‡∏Å‡πâ‡∏≤‡∏≠‡∏µ‡πâ ‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å‡∏™‡∏∞‡πÇ‡∏û‡∏Å',
        'NeckTiltFixed': '‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏®‡∏µ‡∏£‡∏©‡∏∞‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡πÑ‡∏´‡∏•‡πà‡∏ã‡πâ‡∏≤‡∏¢ ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ó‡πà‡∏≤‡∏ï‡∏£‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤'
    };

    if (instructionText) {
        instructionText.textContent = exerciseInstructions[currentExercise] || '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô';
    }
}

function updateCounters() {
    if (repCountElement) {
        repCountElement.textContent = repCounter;
    }
    
    if (scoreElement) {
        scoreElement.textContent = Math.round((repCounter / targetReps) * 100);
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï progress bar
    if (progressFillElement) {
        const progress = Math.min(100, (repCounter / targetReps) * 100);
        progressFillElement.style.width = `${progress}%`;
    }
}

function updateUI() {
    updateCounters();
    updateExerciseInstructions();
}

function showFeedback(message, type = 'info') {
    if (feedbackText) {
        feedbackText.textContent = message;
        
        switch (type) {
            case 'success':
                feedbackText.style.color = '#4CAF50';
                break;
            case 'warning':
                feedbackText.style.color = '#FF9800';
                break;
            case 'error':
                feedbackText.style.color = '#F44336';
                break;
            default:
                feedbackText.style.color = '#333';
        }
    }
    
    console.log(`üí¨ ${type.toUpperCase()}: ${message}`);
}

function showError(message) {
    showFeedback(message, 'error');
}

function logExerciseEvent(event, details) {
    const timestamp = new Date().toLocaleTimeString('th-TH');
    exerciseHistory.push({
        timestamp,
        event,
        details,
        exercise: currentExercise
    });
    console.log(`[${timestamp}] ${event}: ${details}`);
}

function saveExerciseSession() {
    if (!sessionStartTime) return;
    
    const sessionData = {
        id: Date.now(),
        date: new Date().toLocaleDateString('th-TH'),
        time: new Date().toLocaleTimeString('th-TH'),
        exercise: currentExercise,
        exerciseName: getExerciseName(currentExercise),
        repetitions: repCounter,
        duration: elapsedSeconds,
        formattedDuration: formatTime(elapsedSeconds),
        accuracy: accuracyElement ? accuracyElement.textContent : '85%',
        events: [...exerciseHistory]
    };
    
    console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢:', sessionData);
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏∏‡∏° (‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô)
// ========================================

function calculateRealtimeAngles(landmarks) {
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏∏‡∏°
    if (!landmarks || landmarks.length < 33) return;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏∏‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    try {
        const leftShoulder = calculateAngleBasic(landmarks, 13, 11, 23); // ‡∏®‡∏≠‡∏Å-‡πÑ‡∏´‡∏•‡πà-‡∏™‡∏∞‡πÇ‡∏û‡∏Å
        const rightShoulder = calculateAngleBasic(landmarks, 14, 12, 24);
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        if (leftShoulder > 0) currentAngle = leftShoulder;
        if (rightShoulder > 0 && rightShoulder > currentAngle) currentAngle = rightShoulder;
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• realtime info
        updateRealtimeInfo();
        
    } catch (error) {
        console.warn('‚ö†Ô∏è Error calculating angles:', error);
    }
}

function updateRealtimeInfo() {
    if (realtimeInfoElement && movementPhase !== 'rest') {
        const currentAngleDisplay = document.getElementById('current-angle');
        const currentAccuracyDisplay = document.getElementById('current-accuracy');
        const repCountDisplay = document.getElementById('rep-count');
        const movementPhaseDisplay = document.getElementById('movement-phase');
        
        if (currentAngleDisplay) currentAngleDisplay.textContent = Math.round(currentAngle) + '¬∞';
        if (currentAccuracyDisplay) currentAccuracyDisplay.textContent = '0%';
        if (repCountDisplay) repCountDisplay.textContent = repCounter;
        if (movementPhaseDisplay) movementPhaseDisplay.textContent = movementPhase;
    }
}

function calculateAngleBasic(landmarks, aIdx, bIdx, cIdx) {
    if (!landmarks[aIdx] || !landmarks[bIdx] || !landmarks[cIdx]) return 0;
    
    const a = landmarks[aIdx];
    const b = landmarks[bIdx];
    const c = landmarks[cIdx];
    
    if (a.visibility < 0.5 || b.visibility < 0.5 || c.visibility < 0.5) return 0;
    
    return calculateAngle(
        {x: a.x, y: a.y},
        {x: b.x, y: b.y},
        {x: c.x, y: c.y}
    );
}

function calculateAngle(pointA, pointB, pointC) {
    try {
        const BA = {x: pointA.x - pointB.x, y: pointA.y - pointB.y};
        const BC = {x: pointC.x - pointB.x, y: pointC.y - pointB.y};
        
        const dotProduct = BA.x * BC.x + BA.y * BC.y;
        const magnitudeBA = Math.sqrt(BA.x * BA.x + BA.y * BA.y);
        const magnitudeBC = Math.sqrt(BC.x * BC.x + BC.y * BC.y);
        
        if (magnitudeBA === 0 || magnitudeBC === 0) return 0;
        
        const cosAngle = dotProduct / (magnitudeBA * magnitudeBC);
        const clampedCos = Math.max(-1, Math.min(1, cosAngle));
        const angleRad = Math.acos(clampedCos);
        
        return angleRad * (180 / Math.PI);
    } catch (error) {
        console.warn('Error calculating angle:', error);
        return 0;
    }
}

function detectBestSideAutomatically(landmarks) {
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    if (!landmarks || landmarks.length < 33) return;
    
    const leftMovement = calculateMovementScore(landmarks, 'left');
    const rightMovement = calculateMovementScore(landmarks, 'right');
    
    bothSidesData.left.totalQuality = leftMovement;
    bothSidesData.right.totalQuality = rightMovement;
    
    if (leftMovement > rightMovement + 10) {
        autoDetectedSide = 'left';
    } else if (rightMovement > leftMovement + 10) {
        autoDetectedSide = 'right';
    } else {
        autoDetectedSide = 'both';
    }
}

function calculateMovementScore(landmarks, side) {
    const indices = side === 'left' ? [11, 13, 15, 25] : [12, 14, 16, 26];
    let score = 0;
    let count = 0;
    
    indices.forEach(index => {
        if (landmarks[index] && landmarks[index].visibility > 0.5) {
            score += landmarks[index].visibility * 25;
            count++;
        }
    });
    
    return count > 0 ? score / count : 0;
}

function analyzeCurrentExercise() {
    if (!poseResults || !poseResults.poseLandmarks || !currentExercise) {
        return;
    }

    const landmarks = poseResults.poseLandmarks;
    
    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    switch (currentExercise) {
        case 'ArmRaiseForward':
            analyzeArmRaise(landmarks);
            break;
        case 'KneeExtension':
            analyzeKneeExtension(landmarks);
            break;
        case 'TrunkSway':
            analyzeTrunkSway(landmarks);
            break;
        case 'NeckTiltFixed':
            analyzeNeckTilt(landmarks);
            break;
        default:
            showFeedback('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡πà‡∏≤‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å');
    }
}

function analyzeArmRaise(landmarks) {
    const leftAngle = calculateAngleBasic(landmarks, 15, 13, 11); // ‡∏°‡∏∑‡∏≠-‡∏®‡∏≠‡∏Å-‡πÑ‡∏´‡∏•‡πà
    const rightAngle = calculateAngleBasic(landmarks, 16, 14, 12);
    
    const maxAngle = Math.max(leftAngle, rightAngle);
    currentAngle = maxAngle;
    
    if (maxAngle > 120 && movementPhase === 'rest') {
        movementPhase = 'lifting';
        showFeedback('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏Å‡πÅ‡∏Ç‡∏ô...');
    } else if (maxAngle > 160 && movementPhase === 'lifting') {
        movementPhase = 'holding';
        showFeedback('‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏á‡∏ó‡πà‡∏≤‡πÑ‡∏ß‡πâ');
        setTimeout(() => {
            if (movementPhase === 'holding') {
                movementPhase = 'lowering';
                showFeedback('‡∏•‡∏á‡πÅ‡∏Ç‡∏ô‡∏ä‡πâ‡∏≤‡πÜ');
            }
        }, 2000);
    } else if (maxAngle < 60 && movementPhase === 'lowering') {
        completeRepetition();
    }
}

function analyzeKneeExtension(landmarks) {
    const leftKneeAngle = calculateAngleBasic(landmarks, 27, 25, 23); // ‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πâ‡∏≤-‡πÄ‡∏Ç‡πà‡∏≤-‡∏™‡∏∞‡πÇ‡∏û‡∏Å
    const rightKneeAngle = calculateAngleBasic(landmarks, 28, 26, 24);
    
    const maxAngle = Math.max(leftKneeAngle, rightKneeAngle);
    currentAngle = maxAngle;
    
    if (maxAngle > 150 && movementPhase === 'rest') {
        movementPhase = 'extending';
        showFeedback('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡πÄ‡∏Ç‡πà‡∏≤...');
    } else if (maxAngle > 170 && movementPhase === 'extending') {
        movementPhase = 'holding';
        showFeedback('‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏á‡∏ó‡πà‡∏≤‡πÑ‡∏ß‡πâ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ');
        setTimeout(() => {
            if (movementPhase === 'holding') {
                movementPhase = 'flexing';
                showFeedback('‡∏á‡∏≠‡πÄ‡∏Ç‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö');
            }
        }, 2000);
    } else if (maxAngle < 120 && movementPhase === 'flexing') {
        completeRepetition();
    }
}

function analyzeTrunkSway(landmarks) {
    if (!landmarks[11] || !landmarks[12] || !landmarks[23] || !landmarks[24]) return;
    
    const shoulderCenter = {
        x: (landmarks[11].x + landmarks[12].x) / 2,
        y: (landmarks[11].y + landmarks[12].y) / 2
    };
    const hipCenter = {
        x: (landmarks[23].x + landmarks[24].x) / 2,
        y: (landmarks[23].y + landmarks[24].y) / 2
    };
    
    const tilt = Math.abs(shoulderCenter.x - hipCenter.x) * 100;
    currentAngle = Math.min(30, tilt);
    
    if (tilt > 15 && movementPhase === 'rest') {
        movementPhase = 'swaying';
        showFeedback('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏¢‡∏Å‡∏•‡∏≥‡∏ï‡∏±‡∏ß...');
    } else if (tilt > 25 && movementPhase === 'swaying') {
        movementPhase = 'holding';
        showFeedback('‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏á‡∏ó‡πà‡∏≤‡πÑ‡∏ß‡πâ');
        setTimeout(() => {
            if (movementPhase === 'holding') {
                movementPhase = 'returning';
                showFeedback('‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ó‡πà‡∏≤‡∏ï‡∏£‡∏á');
            }
        }, 2000);
    } else if (tilt < 5 && movementPhase === 'returning') {
        completeRepetition();
    }
}

function analyzeNeckTilt(landmarks) {
    if (!landmarks[7] || !landmarks[8]) return;
    
    const earHeightDiff = Math.abs(landmarks[7].y - landmarks[8].y);
    const tiltAngle = Math.min(45, earHeightDiff * 100);
    currentAngle = tiltAngle;
    
    if (tiltAngle > 10 && movementPhase === 'rest') {
        movementPhase = 'tilting';
        showFeedback('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏®‡∏µ‡∏£‡∏©‡∏∞...');
    } else if (tiltAngle > 20 && movementPhase === 'tilting') {
        movementPhase = 'holding';
        showFeedback('‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏á‡∏ó‡πà‡∏≤‡πÑ‡∏ß‡πâ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ');
        setTimeout(() => {
            if (movementPhase === 'holding') {
                movementPhase = 'returning';
                showFeedback('‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ó‡πà‡∏≤‡∏ï‡∏£‡∏á');
            }
        }, 2000);
    } else if (tiltAngle < 5 && movementPhase === 'returning') {
        completeRepetition();
    }
}

function completeRepetition() {
    repCounter++;
    exerciseCount++;
    movementPhase = 'rest';
    
    showFeedback(`‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${repCounter}`, 'success');
    updateCounters();
    
    if (repCounter >= targetReps) {
        showFeedback('‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß', 'success');
        setTimeout(() => {
            stopExercise();
        }, 2000);
    }
}

// Export functions to global scope
window.strokeSystem = {
    startExercise,
    stopExercise,
    resetExerciseState,
    toggleExercise,
    getExerciseName,
    formatTime
};

console.log('‚úÖ main.js ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ - ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î Stroke ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');