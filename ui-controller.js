// ========================================
// ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° UI ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ Stroke
// ui-controller.js
// ========================================
// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ DOM elements
const progressBar = document.querySelector('.progress-fill') || document.getElementById('progress-fill');
const progressText = document.querySelector('.progress-text') || document.getElementById('progress-text');
// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
// ========================================

function showFeedback(message, type = 'info') {
    if (feedbackText) {
        feedbackText.textContent = message;
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        switch (type) {
            case 'success':
                feedbackText.style.color = '#4CAF50';
                feedbackText.style.backgroundColor = 'rgba(76, 175, 80, 0.1)';
                break;
            case 'warning':
                feedbackText.style.color = '#FF9800';
                feedbackText.style.backgroundColor = 'rgba(255, 152, 0, 0.1)';
                break;
            case 'error':
                feedbackText.style.color = '#F44336';
                feedbackText.style.backgroundColor = 'rgba(244, 67, 54, 0.1)';
                break;
            default:
                feedbackText.style.color = '#333';
                feedbackText.style.backgroundColor = 'rgba(33, 150, 243, 0.1)';
        }
        
        feedbackText.style.padding = '8px 12px';
        feedbackText.style.borderRadius = '6px';
        feedbackText.style.border = `1px solid ${feedbackText.style.color}`;
    }
    
    console.log(`üí¨ ${type.toUpperCase()}: ${message}`);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    if (type === 'success') {
        playSuccessSound();
    } else if (type === 'error') {
        playErrorSound();
    }
}

function showError(message) {
    showFeedback(message, 'error');
}

function showSuccess(message) {
    showFeedback(message, 'success');
}

function showWarning(message) {
    showFeedback(message, 'warning');
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
// ========================================

function updateCounters() {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    if (repCountElement) {
        repCountElement.textContent = repCounter;
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        if (repCounter > 0) {
            repCountElement.style.transform = 'scale(1.2)';
            setTimeout(() => {
                repCountElement.style.transform = 'scale(1)';
            }, 200);
        }
    }
    
    updateProgressBar();
    updateSetInfo();
}
function updateProgressBar() {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    if (!progressBar) {
        console.warn('‡πÑ‡∏°‡πà‡∏û‡∏ö progress bar element');
        return;
    }
    
    const totalReps = (typeof targetReps !== 'undefined' ? targetReps : 10) * 
                     (typeof targetSets !== 'undefined' ? targetSets : 2);
    const currentCount = typeof exerciseCount !== 'undefined' ? exerciseCount : 0;
    const progress = Math.min(100, Math.round((currentCount / totalReps) * 100));
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
    progressBar.style.width = `${progress}%`;
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (progressText) {
        progressText.textContent = `‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${progress}%`;
    }
    
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
    if (progress < 30) {
        progressBar.style.backgroundColor = '#FF6B6B';
    } else if (progress < 70) {
        progressBar.style.backgroundColor = '#4ECDC4';
    } else {
        progressBar.style.backgroundColor = '#45B7D1';
    }
    
    // ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏ö 100%
    if (progress === 100) {
        progressBar.style.backgroundColor = '#4CAF50';
        if (progressText) {
            progressText.style.fontWeight = 'bold';
            progressText.style.color = '#4CAF50';
        }
    }
}

function updateSetInfo() {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏ï
    const setInfoElement = document.getElementById('set-info');
    if (setInfoElement) {
        setInfoElement.textContent = `‡πÄ‡∏ã‡∏ï ${setCounter}/${targetSets}`;
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
    if (progressText) {
        const totalReps = targetReps * targetSets;
        const progress = Math.min(100, Math.round((exerciseCount / totalReps) * 100));
        progressText.textContent = `‡πÄ‡∏ã‡∏ï ${setCounter}/${targetSets} - ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${progress}%`;
    }
}

function updateAccuracyDisplay(accuracy) {
    if (!accuracyElement) return;
    
    const accuracyValue = Math.min(95, Math.max(0, Math.round(accuracy)));
    accuracyElement.textContent = `${accuracyValue}%`;
    
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
    if (accuracyValue >= 90) {
        accuracyElement.style.color = '#4CAF50'; // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
    } else if (accuracyValue >= 70) {
        accuracyElement.style.color = '#FF9800'; // ‡∏™‡πâ‡∏°
    } else {
        accuracyElement.style.color = '#F44336'; // ‡πÅ‡∏î‡∏á
    }
}

function updateExerciseInstructions() {
    if (!instructionText || !currentExercise) return;
    
    const instructions = getDetailedInstructions(currentExercise);
    instructionText.textContent = instructions;
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡πÑ‡∏î‡∏ô‡∏≤‡∏°‡∏¥‡∏Å
    instructionText.style.opacity = '0';
    setTimeout(() => {
        instructionText.style.opacity = '1';
    }, 100);
}

function getDetailedInstructions(exerciseCode) {
    const instructions = {
        // ‡∏ó‡πà‡∏≤‡∏ß‡∏≠‡∏£‡πå‡∏°‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢
        'arm-spread': '‡∏ß‡∏≤‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡πâ‡∏≠‡∏á ‡∏Å‡∏≤‡∏á‡πÅ‡∏Ç‡∏ô‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÑ‡∏´‡∏•‡πà ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏´‡∏∏‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏°‡∏ä‡πâ‡∏≤‡πÜ ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÅ‡∏Ç‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏´‡∏±‡∏ß‡πÑ‡∏´‡∏•‡πà',
        'neck-flex': '‡∏Å‡πâ‡∏°‡∏®‡∏µ‡∏£‡∏©‡∏∞‡∏ä‡πâ‡∏≤‡πÜ ‡∏à‡∏ô‡∏Ñ‡∏≤‡∏á‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏ä‡∏¥‡∏î‡∏≠‡∏Å ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏á‡∏¢‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏ô‡∏°‡∏≠‡∏á‡πÄ‡∏û‡∏î‡∏≤‡∏ô ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏ï‡πà‡∏≠‡∏Ñ‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏Ç‡∏¢‡∏±‡∏ö‡∏•‡∏≥‡∏ï‡∏±‡∏ß ‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠',
        'neck-tilt': '‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏®‡∏µ‡∏£‡∏©‡∏∞‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡πÑ‡∏´‡∏•‡πà‡∏ã‡πâ‡∏≤‡∏¢ ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤ ‡∏´‡∏π‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏´‡∏≤‡πÑ‡∏´‡∏•‡πà‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏¢‡∏Å‡πÑ‡∏´‡∏•‡πà‡∏Ç‡∏∂‡πâ‡∏ô ‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ 3-5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ó‡∏≥‡∏ä‡πâ‡∏≤‡πÜ',
        
        // ‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏ô
        'shoulder-shrug': '‡∏¢‡∏±‡∏Å‡πÑ‡∏´‡∏•‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏•‡∏á‡∏ä‡πâ‡∏≤‡πÜ ‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏á ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏£‡πá‡∏á‡∏Ñ‡∏≠ ‡∏¢‡∏Å‡πÑ‡∏´‡∏•‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ú‡πà‡∏≠‡∏ô‡∏•‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°',
        'hand-grip-side': '‡∏Å‡∏≥‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏°‡∏∑‡∏≠‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏±‡∏ô ‡πÇ‡∏î‡∏¢‡πÅ‡∏Ç‡∏ô‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏•‡∏≥‡∏ï‡∏±‡∏ß ‡πÑ‡∏°‡πà‡∏¢‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥-‡πÅ‡∏ö ‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠',
        'hand-grip-front': '‡∏ä‡∏π‡πÅ‡∏Ç‡∏ô‡πÑ‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÑ‡∏´‡∏•‡πà ‡∏Å‡∏≥‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏°‡∏∑‡∏≠‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏±‡∏ô ‡πÅ‡∏Ç‡∏ô‡∏¢‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÑ‡∏´‡∏•‡πà ‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡∏®‡∏≠‡∏Å‡∏ï‡∏£‡∏á',
        'arm-overhead': '‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏°‡∏∑‡∏≠‡∏ß‡∏≤‡∏á‡∏ö‡∏ô‡∏ï‡∏±‡∏Å ‡πÅ‡∏•‡πâ‡∏ß‡∏ä‡∏π‡πÅ‡∏Ç‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏´‡∏±‡∏ß ‡∏¢‡∏∑‡∏î‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏á ‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏®‡∏≠‡∏Å‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô',
        'elbow-flex': '‡∏Å‡∏≥‡∏°‡∏∑‡∏≠ ‡∏û‡∏±‡∏ö‡∏®‡∏≠‡∏Å ‡πÅ‡∏ï‡∏∞‡∏°‡∏∑‡∏≠ ‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏á‡∏®‡∏≠‡∏Å ‡πÅ‡∏Ç‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏≠‡∏Å ‡∏®‡∏≠‡∏Å‡πÅ‡∏ô‡∏ö‡∏•‡∏≥‡∏ï‡∏±‡∏ß‡∏ï‡∏≠‡∏ô‡∏á‡∏≠',
        'wrist-rotation': '‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏°‡∏∑‡∏≠ ‡∏®‡∏≠‡∏Å‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡∏ï‡∏£‡∏á ‡∏Ñ‡∏ß‡πà‡∏≥‡∏°‡∏∑‡∏≠-‡∏´‡∏á‡∏≤‡∏¢‡∏°‡∏∑‡∏≠ ‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏Ç‡∏¢‡∏±‡∏ö‡πÅ‡∏Ç‡∏ô',
        'finger-touch': '‡πÅ‡∏ï‡∏∞‡∏ô‡∏¥‡πâ‡∏ß‡∏´‡∏±‡∏ß‡πÅ‡∏°‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏±‡∏ö‡∏ô‡∏¥‡πâ‡∏ß‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ä‡πâ‡∏≤‡πÜ ‡∏ô‡∏¥‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö 1-5',
        
        // ‡∏•‡∏≥‡∏ï‡∏±‡∏ß
        'trunk-sway': '‡πÇ‡∏¢‡∏Å‡∏•‡∏≥‡∏ï‡∏±‡∏ß‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤ ‡∏Ç‡∏≤‡∏ô‡∏±‡πà‡∏á‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á‡∏ö‡∏ô‡πÄ‡∏Å‡πâ‡∏≤‡∏≠‡∏µ‡πâ ‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å‡∏™‡∏∞‡πÇ‡∏û‡∏Å ‡∏´‡∏±‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°',
        'trunk-reach': '‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏°‡∏∑‡∏≠‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡∏ï‡∏£‡∏á ‡πÄ‡∏≠‡∏∑‡πâ‡∏≠‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤ ‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏á ‡πÅ‡∏Ç‡∏ô‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡∏Ç‡∏ô‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô ‡∏´‡∏°‡∏∏‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏ß',
        'trunk-reach-floor': '‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏°‡∏∑‡∏≠‡πÄ‡∏≠‡∏∑‡πâ‡∏≠‡∏°‡πÅ‡∏ï‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏á ‡πÑ‡∏°‡πà‡∏á‡∏≠‡∏Ñ‡∏≠ ‡πÄ‡∏≠‡∏∑‡πâ‡∏≠‡∏°‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡∏™‡∏∞‡πÇ‡∏û‡∏Å',
        'side-reach': '‡πÅ‡∏ï‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤ ‡∏°‡∏∑‡∏≠‡πÅ‡∏ï‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏•‡∏≥‡∏ï‡∏±‡∏ß ‡∏Ç‡∏≤‡πÑ‡∏°‡πà‡∏¢‡∏Å‡∏ï‡∏≤‡∏° ‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏ß',
        'back-extension': '‡πÄ‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ï‡∏∞‡∏û‡∏ô‡∏±‡∏Å‡∏û‡∏¥‡∏á ‡πÄ‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏™‡∏∞‡πÇ‡∏û‡∏Å ‡∏´‡∏•‡∏±‡∏á‡∏¢‡∏±‡∏á‡∏ï‡∏£‡∏á ‡πÑ‡∏°‡πà‡∏á‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏•‡πà‡∏≤‡∏á',
        
        // ‡∏™‡πà‡∏ß‡∏ô‡∏•‡πà‡∏≤‡∏á
        'hip-shift': '‡∏¢‡∏Å‡∏Å‡πâ‡∏ô‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤ ‡∏¢‡∏Å‡∏Å‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÅ‡∏Å‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ',
        'leg-abduction': '‡∏Å‡∏≤‡∏á‡∏Ç‡∏≤‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤‡∏≠‡∏≠‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á ‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏á ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏ô‡πÑ‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏î ‡πÅ‡∏Ç‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡∏Ñ‡∏≠‡∏á‡∏ï‡∏±‡∏ß',
        'leg-forward': '‡∏Å‡πâ‡∏≤‡∏ß‡∏Ç‡∏≤‡πÅ‡∏ï‡∏∞‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤ ‡∏Ç‡∏≤‡∏ï‡∏£‡∏á ‡πÅ‡∏ô‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡πÄ‡∏ö‡∏≤‡πÜ ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞ ‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡πÅ‡∏ó‡∏Å',
        'leg-together': '‡∏Å‡∏≤‡∏á‡∏Ç‡∏≤-‡∏´‡∏∏‡∏ö‡∏Ç‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô ‡πÄ‡∏ó‡πâ‡∏≤‡∏ï‡∏¥‡∏î‡∏û‡∏∑‡πâ‡∏ô ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô ‡∏Ñ‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≤',
        'knee-extension': '‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡πÄ‡∏Ç‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏á ‡∏ô‡∏±‡πà‡∏á‡∏ö‡∏ô‡πÄ‡∏Å‡πâ‡∏≤‡∏≠‡∏µ‡πâ ‡∏ï‡∏±‡∏ß‡∏ï‡∏£‡∏á ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏ô‡πÑ‡∏õ‡∏´‡∏•‡∏±‡∏á ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ï‡πâ‡∏ô‡∏Ç‡∏≤‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡∏Ç‡∏≤‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏î'
    };
    
    return instructions[exerciseCode] || '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô';
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π
// ========================================

function highlightActiveExercise() {
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const allSelects = [warmupSelect, upperBodySelect, trunkSelect, lowerBodySelect];
    allSelects.forEach(select => {
        if (select && select !== event.target) {
            select.classList.remove('active-exercise');
        }
    });
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ô‡πâ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if (event.target) {
        event.target.classList.add('active-exercise');
    }
}

function updateExerciseMenu() {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡πà‡∏≤‡∏á‡πÜ
    const menus = {
        'warmup': warmupSelect,
        'upper-body': upperBodySelect,
        'trunk': trunkSelect,
        'lower-body': lowerBodySelect
    };
    
    Object.keys(menus).forEach(category => {
        const menu = menus[category];
        if (menu) {
            if (category === currentCategory) {
                menu.style.borderColor = '#4CAF50';
                menu.style.backgroundColor = 'rgba(76, 175, 80, 0.1)';
            } else {
                menu.style.borderColor = '#ddd';
                menu.style.backgroundColor = 'white';
            }
        }
    });
}

function showExercisePreview(exerciseCode) {
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
    const previewContainer = document.getElementById('exercise-preview');
    if (!previewContainer) return;
    
    const previewInfo = getExercisePreviewInfo(exerciseCode);
    
    previewContainer.innerHTML = `
        <div class="preview-header">
            <h4>${previewInfo.name}</h4>
            <span class="preview-category">${previewInfo.category}</span>
        </div>
        <div class="preview-content">
            <div class="preview-description">${previewInfo.description}</div>
            <div class="preview-benefits">
                <strong>‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå:</strong> ${previewInfo.benefits}
            </div>
            <div class="preview-tips">
                <strong>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á:</strong> ${previewInfo.tips}
            </div>
        </div>
    `;
    
    previewContainer.style.display = 'block';
}

function getExercisePreviewInfo(exerciseCode) {
    const previewData = {
        // ‡∏ó‡πà‡∏≤‡∏ß‡∏≠‡∏£‡πå‡∏°‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢
        'arm-spread': {
            name: '‡∏ó‡πà‡∏≤‡∏Å‡∏≤‡∏á‡πÅ‡∏Ç‡∏ô-‡∏´‡∏∏‡∏ö‡πÅ‡∏Ç‡∏ô',
            category: '‡∏ß‡∏≠‡∏£‡πå‡∏°‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢',
            description: '‡∏ä‡πà‡∏ß‡∏¢‡∏¢‡∏∑‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÅ‡∏Ç‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏´‡∏•‡πà ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢',
            benefits: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡πÑ‡∏´‡∏•‡πà ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∂‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠',
            tips: '‡πÑ‡∏°‡πà‡∏¢‡∏Å‡πÅ‡∏Ç‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠'
        },
        'neck-flex': {
            name: '‡∏ó‡πà‡∏≤‡∏Å‡πâ‡∏°-‡πÄ‡∏á‡∏¢‡∏®‡∏µ‡∏£‡∏©‡∏∞',
            category: '‡∏ß‡∏≠‡∏£‡πå‡∏°‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢',
            description: '‡∏¢‡∏∑‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠',
            benefits: '‡∏•‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡πÅ‡∏Ç‡πá‡∏á ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠',
            tips: '‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ä‡πâ‡∏≤‡πÜ ‡πÑ‡∏°‡πà‡πÄ‡∏á‡∏¢‡∏Ñ‡∏≠‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ'
        },
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πà‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    };
    
    return previewData[exerciseCode] || {
        name: '‡∏ó‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢',
        category: '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
        description: '‡∏ä‡πà‡∏ß‡∏¢‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢',
        benefits: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô',
        tips: '‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á'
    };
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á
// ========================================

function playSuccessSound() {
    try {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
        oscillator.frequency.setValueAtTime(1000, audioContext.currentTime + 0.1);
        
        gainNode.gain.setValueAtTime(0, audioContext.currentTime);
        gainNode.gain.linearRampToValueAtTime(0.2, audioContext.currentTime + 0.1);
        gainNode.gain.linearRampToValueAtTime(0, audioContext.currentTime + 0.3);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.3);
    } catch (error) {
        // ‡πÑ‡∏°‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
        console.log('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ');
    }
}

function playErrorSound() {
    try {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.setValueAtTime(300, audioContext.currentTime);
        oscillator.frequency.setValueAtTime(200, audioContext.currentTime + 0.1);
        
        gainNode.gain.setValueAtTime(0, audioContext.currentTime);
        gainNode.gain.linearRampToValueAtTime(0.1, audioContext.currentTime + 0.1);
        gainNode.gain.linearRampToValueAtTime(0, audioContext.currentTime + 0.2);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.2);
    } catch (error) {
        console.log('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ');
    }
}

function showNotification(title, message, type = 'info') {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö popup
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <div class="notification-header">
            <i class="fas fa-${getNotificationIcon(type)}"></i>
            <strong>${title}</strong>
            <button class="notification-close">&times;</button>
        </div>
        <div class="notification-body">${message}</div>
    `;
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS styles
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        padding: 16px;
        max-width: 300px;
        z-index: 1000;
        border-left: 4px solid ${getNotificationColor(type)};
        animation: slideInRight 0.3s ease-out;
    `;
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    document.body.appendChild(notification);
    
    // ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î
    const closeBtn = notification.querySelector('.notification-close');
    closeBtn.onclick = () => removeNotification(notification);
    
    // ‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    setTimeout(() => removeNotification(notification), 5000);
    
    return notification;
}

function getNotificationIcon(type) {
    const icons = {
        'success': 'check-circle',
        'warning': 'exclamation-triangle',
        'error': 'times-circle',
        'info': 'info-circle'
    };
    return icons[type] || 'info-circle';
}

function getNotificationColor(type) {
    const colors = {
        'success': '#4CAF50',
        'warning': '#FF9800',
        'error': '#F44336',
        'info': '#2196F3'
    };
    return colors[type] || '#2196F3';
}

function removeNotification(notification) {
    if (notification && notification.parentElement) {
        notification.style.animation = 'slideOutRight 0.3s ease-in';
        setTimeout(() => {
            if (notification.parentElement) {
                notification.parentElement.removeChild(notification);
            }
        }, 300);
    }
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡∏î‡∏±‡∏•
// ========================================

function showModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'block';
        document.body.style.overflow = 'hidden'; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏¥‡∏î‡πÇ‡∏°‡∏î‡∏±‡∏•
        const closeBtn = modal.querySelector('.close');
        if (closeBtn) {
            closeBtn.onclick = () => hideModal(modalId);
        }
        
        // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡∏≠‡∏Å‡πÇ‡∏°‡∏î‡∏±‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î
        modal.onclick = (event) => {
            if (event.target === modal) {
                hideModal(modalId);
            }
        };
    }
}

function hideModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'none';
        document.body.style.overflow = 'auto'; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô
    }
}

function updateResultModal(sessionData) {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÇ‡∏°‡∏î‡∏±‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å
    const modalReps = document.getElementById('modal-reps');
    const modalTime = document.getElementById('modal-time');
    const modalScore = document.getElementById('modal-score');
    const modalFeedback = document.getElementById('modal-feedback');
    
    if (modalReps) modalReps.textContent = `${sessionData.totalCount}/${sessionData.repetitions * sessionData.sets}`;
    if (modalTime) modalTime.textContent = sessionData.formattedDuration;
    if (modalScore) modalScore.textContent = sessionData.accuracy;
    if (modalFeedback) modalFeedback.textContent = generateSessionFeedback(sessionData);
}

function generateSessionFeedback(sessionData) {
    const accuracy = parseInt(sessionData.accuracy) || 0;
    const completionRate = (sessionData.totalCount / (sessionData.repetitions * sessionData.sets)) * 100;
    
    let feedback = '';
    
    if (completionRate >= 100 && accuracy >= 90) {
        feedback = '‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô';
    } else if (completionRate >= 80 && accuracy >= 70) {
        feedback = '‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á ‡∏Ñ‡∏ß‡∏£‡∏ù‡∏∂‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥';
    } else if (completionRate >= 50) {
        feedback = '‡∏î‡∏µ! ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ù‡∏∂‡∏Å‡∏ä‡πâ‡∏≤‡πÜ ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß';
    } else {
        feedback = '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ! ‡∏≠‡∏¢‡πà‡∏≤‡∏ó‡πâ‡∏≠‡πÉ‡∏à ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ';
    }
    
    return feedback;
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
// ========================================

function addAnimationCSS() {
    const style = document.createElement('style');
    style.textContent = `
        @keyframes slideInRight {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        
        @keyframes slideOutRight {
            from { transform: translateX(0); opacity: 1; }
            to { transform: translateX(100%); opacity: 0; }
        }
        
        @keyframes bounce {
            0%, 20%, 53%, 80%, 100% { transform: translate3d(0,0,0); }
            40%, 43% { transform: translate3d(0,-30px,0); }
            70% { transform: translate3d(0,-15px,0); }
            90% { transform: translate3d(0,-4px,0); }
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        
        .active-exercise {
            animation: pulse 0.5s ease-in-out;
            border-color: #4CAF50 !important;
            box-shadow: 0 0 10px rgba(76, 175, 80, 0.3);
        }
        
        .success-bounce {
            animation: bounce 1s ease-in-out;
        }
        
        .notification {
            animation: slideInRight 0.3s ease-out;
        }
    `;
    document.head.appendChild(style);
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô UI Controller
// ========================================

function initializeUIController() {
    console.log('üé® ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô UI Controller...');
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
    addAnimationCSS();
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÇ‡∏°‡∏î‡∏±‡∏•
    setupModalEventListeners();
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö responsive
    setupResponsiveUI();
    
    console.log('‚úÖ UI Controller ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
}

function setupModalEventListeners() {
    // ‡∏õ‡∏¥‡∏î‡πÇ‡∏°‡∏î‡∏±‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Escape
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            const modals = document.querySelectorAll('.modal[style*="block"]');
            modals.forEach(modal => {
                modal.style.display = 'none';
                document.body.style.overflow = 'auto';
            });
        }
    });
}

function setupResponsiveUI() {
    // ‡∏õ‡∏£‡∏±‡∏ö UI ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    function updateResponsiveElements() {
        const isMobile = window.innerWidth <= 768;
        const elements = document.querySelectorAll('.stat-container, .form-row, .exercise-category');
        
        elements.forEach(element => {
            if (isMobile) {
                element.style.flexDirection = 'column';
                element.style.marginBottom = '10px';
            } else {
                element.style.flexDirection = 'row';
                element.style.marginBottom = '20px';
            }
        });
    }
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    window.addEventListener('resize', updateResponsiveElements);
    updateResponsiveElements(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
// ========================================

function displayMovementInfo(value, unit) {
    const infoElement = document.querySelector('.movement-info');
    if (infoElement) {
        infoElement.textContent = `${value} ${unit}`;
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        infoElement.style.transform = 'scale(1.1)';
        setTimeout(() => {
            infoElement.style.transform = 'scale(1)';
        }, 200);
    }
    
    console.log(`üìä Movement Info: ${value} ${unit}`);
}

function updateTimer(seconds) {
    if (timeElement) {
        const formattedTime = formatTime(seconds);
        timeElement.textContent = formattedTime;
        
        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ù‡∏∂‡∏Å‡∏ô‡∏≤‡∏ô
        if (seconds > 300) { // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
            timeElement.style.color = '#4CAF50';
        } else if (seconds > 180) { // 3 ‡∏ô‡∏≤‡∏ó‡∏µ
            timeElement.style.color = '#FF9800';
        } else {
            timeElement.style.color = '#333';
        }
    }
}

function createFloatingMessage(message, x, y) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏≠‡∏¢‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    const floatingMsg = document.createElement('div');
    floatingMsg.textContent = message;
    floatingMsg.style.cssText = `
        position: fixed;
        left: ${x}px;
        top: ${y}px;
        color: #4CAF50;
        font-weight: bold;
        font-size: 18px;
        pointer-events: none;
        z-index: 1000;
        animation: floatUp 2s ease-out forwards;
    `;
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
    const style = document.createElement('style');
    style.textContent = `
        @keyframes floatUp {
            0% { opacity: 1; transform: translateY(0); }
            100% { opacity: 0; transform: translateY(-50px); }
        }
    `;
    document.head.appendChild(style);
    
    document.body.appendChild(floatingMsg);
    
    // ‡∏•‡∏ö‡∏´‡∏•‡∏±‡∏á 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    setTimeout(() => {
        if (floatingMsg.parentElement) {
            floatingMsg.parentElement.removeChild(floatingMsg);
        }
        if (style.parentElement) {
            style.parentElement.removeChild(style);
        }
    }, 2000);
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
document.addEventListener('DOMContentLoaded', initializeUIController);

console.log('‚úÖ ui-controller.js ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ - ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° UI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');