// ========================================
// ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô Canvas ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ Stroke
// canvas-display.js
// ========================================
// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Canvas
// ========================================

function setupCameraCanvas() {
    if (!canvasElement || !videoElement) {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö canvas ‡∏´‡∏£‡∏∑‡∏≠ video element');
        return;
    }

    console.log('üé® ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Canvas...');

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ video ‡∏û‡∏£‡πâ‡∏≠‡∏°
    const updateCanvasSize = () => {
        if (videoElement.videoWidth > 0 && videoElement.videoHeight > 0) {
            canvasElement.width = videoElement.videoWidth;
            canvasElement.height = videoElement.videoHeight;
            
            // ‡∏õ‡∏£‡∏±‡∏ö CSS ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ‡∏î‡∏µ
            canvasElement.style.width = '100%';
            canvasElement.style.height = 'auto';
            canvasElement.style.maxHeight = '400px';
            
            console.log(`‚úÖ Canvas ‡∏Ç‡∏ô‡∏≤‡∏î: ${canvasElement.width}x${canvasElement.height}`);
        } else {
            // ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á 100ms
            setTimeout(updateCanvasSize, 100);
        }
    };
    
    updateCanvasSize();
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
// ========================================

function drawPoseResults() {
    if (!canvasCtx || !poseResults) return;
    
    try {
        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå canvas
        canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);
        
        // ‡∏ß‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
        if (videoElement && videoElement.videoWidth > 0) {
            canvasCtx.drawImage(videoElement, 0, 0, canvasElement.width, canvasElement.height);
        }
        
        if (poseResults.poseLandmarks) {
            // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏à‡∏∏‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏£‡πà‡∏≤‡∏á
            drawPoseConnections();
            
            // ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡∏≤‡∏°‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            highlightImportantLandmarks();
            
            // ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î landmarks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            drawAllLandmarks();
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            drawExerciseInfo();
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á
            drawSideComparisonInfo();
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Error in drawPoseResults:', error);
    }
}

function drawPoseConnections() {
    if (!window.drawConnectors || !window.POSE_CONNECTIONS) return;
    
    try {
        window.drawConnectors(canvasCtx, poseResults.poseLandmarks, 
            window.POSE_CONNECTIONS, {
                color: '#00FF00', 
                lineWidth: 2
            });
    } catch (error) {
        console.warn('‚ö†Ô∏è Error drawing connectors:', error);
    }
}

function drawAllLandmarks() {
    if (!window.drawLandmarks) return;
    
    try {
        window.drawLandmarks(canvasCtx, poseResults.poseLandmarks, {
            color: '#FF0000', 
            lineWidth: 1, 
            radius: 3
        });
    } catch (error) {
        console.warn('‚ö†Ô∏è Error drawing landmarks:', error);
    }
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
// ========================================

function highlightImportantLandmarks() {
    if (!poseResults.poseLandmarks || !window.drawLandmarks || !currentExercise) return;
    
    const landmarks = poseResults.poseLandmarks;
    let highlightIndices = [];
    
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏•‡∏∞‡∏ó‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å
    switch (currentCategory) {
        case 'warmup':
            highlightIndices = getWarmupHighlights();
            break;
        case 'upper-body':
            highlightIndices = getUpperBodyHighlights();
            break;
        case 'trunk':
            highlightIndices = getTrunkHighlights();
            break;
        case 'lower-body':
            highlightIndices = getLowerBodyHighlights();
            break;
    }
    
    // ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå
    const highlightLandmarks = highlightIndices
        .map(index => landmarks[index])
        .filter(landmark => landmark && landmark.visibility > 0.5);
    
    if (highlightLandmarks.length > 0) {
        try {
            // ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
            window.drawLandmarks(canvasCtx, highlightLandmarks, {
                color: '#FFFF00', 
                lineWidth: 3, 
                radius: 6
            });
            
            // ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
            drawActiveSideHighlights(landmarks, highlightIndices);
        } catch (error) {
            console.warn('‚ö†Ô∏è Error highlighting landmarks:', error);
        }
    }
}

function getWarmupHighlights() {
    switch (currentExercise) {
        case 'arm-spread':
            // ‡πÑ‡∏´‡∏•‡πà, ‡∏®‡∏≠‡∏Å, ‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á
            return [11, 12, 13, 14, 15, 16];
        case 'neck-flex':
            // ‡∏à‡∏°‡∏π‡∏Å, ‡∏õ‡∏≤‡∏Å, ‡∏Ñ‡∏≤‡∏á
            return [0, 9, 10];
        case 'neck-tilt':
            // ‡∏à‡∏°‡∏π‡∏Å, ‡∏´‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á
            return [0, 7, 8];
        default:
            return [];
    }
}

function getUpperBodyHighlights() {
    switch (currentExercise) {
        case 'shoulder-shrug':
            // ‡πÑ‡∏´‡∏•‡πà‡πÅ‡∏•‡∏∞‡∏™‡∏∞‡πÇ‡∏û‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á
            return [11, 12, 23, 24];
        case 'hand-grip-side':
        case 'hand-grip-front':
        case 'finger-touch':
            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á
            return [15, 16];
        case 'arm-overhead':
            // ‡πÑ‡∏´‡∏•‡πà, ‡∏®‡∏≠‡∏Å, ‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á
            return [11, 12, 13, 14, 15, 16];
        case 'elbow-flex':
            // ‡πÑ‡∏´‡∏•‡πà, ‡∏®‡∏≠‡∏Å, ‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á
            return [11, 12, 13, 14, 15, 16];
        case 'wrist-rotation':
            // ‡∏®‡∏≠‡∏Å, ‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á
            return [13, 14, 15, 16];
        default:
            return [];
    }
}

function getTrunkHighlights() {
    switch (currentExercise) {
        case 'trunk-sway':
        case 'back-extension':
            // ‡πÑ‡∏´‡∏•‡πà‡πÅ‡∏•‡∏∞‡∏™‡∏∞‡πÇ‡∏û‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á
            return [11, 12, 23, 24];
        case 'trunk-reach':
        case 'side-reach':
            // ‡πÅ‡∏Ç‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á
            return [11, 12, 13, 14, 15, 16];
        case 'trunk-reach-floor':
            // ‡πÅ‡∏Ç‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏∞‡πÇ‡∏û‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á
            return [11, 12, 15, 16, 23, 24];
        default:
            return [];
    }
}

function getLowerBodyHighlights() {
    switch (currentExercise) {
        case 'hip-shift':
            // ‡∏™‡∏∞‡πÇ‡∏û‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á
            return [23, 24];
        case 'leg-abduction':
        case 'leg-together':
            // ‡πÄ‡∏Ç‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á
            return [25, 26];
        case 'leg-forward':
        case 'knee-extension':
            // ‡∏™‡∏∞‡πÇ‡∏û‡∏Å, ‡πÄ‡∏Ç‡πà‡∏≤, ‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á
            return [23, 24, 25, 26, 27, 28];
        default:
            return [];
    }
}

function drawActiveSideHighlights(landmarks, highlightIndices) {
    // ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
    const leftQuality = bothSidesData.left.totalQuality || 0;
    const rightQuality = bothSidesData.right.totalQuality || 0;
    
    let activeSideColor = '#FF6B6B'; // ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏≠‡πà‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ
    let activeIndices = [];
    
    if (leftQuality > rightQuality + 10) {
        // ‡∏Ç‡πâ‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
        activeSideColor = '#4ECDC4'; // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô
        activeIndices = highlightIndices.filter(index => [11, 13, 15, 23, 25, 27].includes(index));
    } else if (rightQuality > leftQuality + 10) {
        // ‡∏Ç‡πâ‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
        activeSideColor = '#45B7D1'; // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô
        activeIndices = highlightIndices.filter(index => [12, 14, 16, 24, 26, 28].includes(index));
    }
    
    if (activeIndices.length > 0) {
        const activeLandmarks = activeIndices
            .map(index => landmarks[index])
            .filter(landmark => landmark && landmark.visibility > 0.6);
        
        if (activeLandmarks.length > 0) {
            try {
                window.drawLandmarks(canvasCtx, activeLandmarks, {
                    color: activeSideColor,
                    lineWidth: 4,
                    radius: 8
                });
            } catch (error) {
                console.warn('‚ö†Ô∏è Error drawing active side highlights:', error);
            }
        }
    }
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
// ========================================

function drawExerciseInfo() {
    if (!canvasCtx) return;
    
    try {
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏µ
        canvasCtx.font = '16px Kanit, Arial, sans-serif';
        canvasCtx.fillStyle = '#FFFFFF';
        canvasCtx.strokeStyle = '#000000';
        canvasCtx.lineWidth = 3;
        
        let yPosition = 30;
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ù‡∏∂‡∏Å
        if (currentExercise) {
            const exerciseText = `‡∏ó‡πà‡∏≤: ${getExerciseName(currentExercise)}`;
            drawTextWithOutline(exerciseText, 10, yPosition);
            yPosition += 25;
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ
        const sideText = getAutoDetectionText();
        drawTextWithOutline(sideText, 10, yPosition);
        yPosition += 25;
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (currentAngle > 0 && movementPhase !== 'rest') {
            const angleText = `‡∏°‡∏∏‡∏°: ${Math.round(currentAngle)}¬∞`;
            drawTextWithOutline(angleText, 10, yPosition);
            yPosition += 25;
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ü‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
        if (movementPhase !== 'rest') {
            const phaseText = `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${getPhaseDisplayName(movementPhase)}`;
            drawTextWithOutline(phaseText, 10, yPosition);
            yPosition += 25;
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏î‡πâ
        if (repCounter > 0) {
            const repText = `‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà: ${repCounter}/${targetReps}`;
            drawTextWithOutline(repText, 10, yPosition);
        }
        
    } catch (error) {
        console.warn('‚ö†Ô∏è Error drawing exercise info:', error);
    }
}

function drawTextWithOutline(text, x, y) {
    // ‡∏ß‡∏≤‡∏î‡∏Ç‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏µ‡∏î‡∏≥
    canvasCtx.strokeText(text, x, y);
    // ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
    canvasCtx.fillText(text, x, y);
}

function getAutoDetectionText() {
    const leftQuality = bothSidesData.left.totalQuality || 0;
    const rightQuality = bothSidesData.right.totalQuality || 0;
    
    if (leftQuality > rightQuality + 15) {
        return '‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: ‡∏Ç‡πâ‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢ (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)';
    } else if (rightQuality > leftQuality + 15) {
        return '‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: ‡∏Ç‡πâ‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤ (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)';
    } else {
        return '‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á';
    }
}

function getPhaseDisplayName(phase) {
    const phaseNames = {
        'lifting': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏Å',
        'lowering': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏î',
        'flexing': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏á‡∏≠',
        'extending': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î',
        'spreading': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏á',
        'closing': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏∏‡∏ö',
        'reaching': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏≠‡∏∑‡πâ‡∏≠‡∏°',
        'bending': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡πâ‡∏°',
        'tilting': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏≠‡∏µ‡∏¢‡∏á',
        'shrugging': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏±‡∏Å‡πÑ‡∏´‡∏•‡πà',
        'gripping': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≥-‡πÅ‡∏ö‡∏°‡∏∑‡∏≠',
        'rotating': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏°‡∏∏‡∏ô',
        'touching': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏ï‡∏∞',
        'swaying': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏¢‡∏Å',
        'shifting': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏Å',
        'stepping': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡πâ‡∏≤‡∏ß',
        'abducting': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏á',
        'holding': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏á‡∏ó‡πà‡∏≤',
        'returning': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°'
    };
    return phaseNames[phase] || phase;
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á
// ========================================

function drawSideComparisonInfo() {
    if (!canvasCtx) return;
    
    try {
        // ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô
        const boxWidth = 200;
        const boxHeight = 80;
        const boxX = canvasElement.width - boxWidth - 10;
        const boxY = 10;
        
        // ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
        canvasCtx.fillStyle = 'rgba(0, 0, 0, 0.7)';
        canvasCtx.fillRect(boxX, boxY, boxWidth, boxHeight);
        
        // ‡∏ß‡∏≤‡∏î‡∏Ç‡∏≠‡∏ö
        canvasCtx.strokeStyle = '#FFFFFF';
        canvasCtx.lineWidth = 2;
        canvasCtx.strokeRect(boxX, boxY, boxWidth, boxHeight);
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå
        canvasCtx.font = '14px Kanit, Arial, sans-serif';
        canvasCtx.fillStyle = '#FFFFFF';
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á
        const leftQuality = Math.round(bothSidesData.left.totalQuality || 0);
        const rightQuality = Math.round(bothSidesData.right.totalQuality || 0);
        
        canvasCtx.fillText('‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö:', boxX + 5, boxY + 20);
        canvasCtx.fillText(`‡∏ã‡πâ‡∏≤‡∏¢: ${leftQuality}%`, boxX + 5, boxY + 40);
        canvasCtx.fillText(`‡∏Ç‡∏ß‡∏≤: ${rightQuality}%`, boxX + 5, boxY + 60);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ñ‡∏ö‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
        drawQualityBars(boxX + 80, boxY + 35, leftQuality, rightQuality);
        
    } catch (error) {
        console.warn('‚ö†Ô∏è Error drawing side comparison:', error);
    }
}

function drawQualityBars(x, y, leftQuality, rightQuality) {
    const barWidth = 100;
    const barHeight = 8;
    
    // ‡πÅ‡∏ñ‡∏ö‡∏ã‡πâ‡∏≤‡∏¢
    canvasCtx.fillStyle = '#FF6B6B';
    canvasCtx.fillRect(x, y - 15, barWidth, barHeight);
    canvasCtx.fillStyle = '#4ECDC4';
    canvasCtx.fillRect(x, y - 15, (leftQuality / 100) * barWidth, barHeight);
    
    // ‡πÅ‡∏ñ‡∏ö‡∏Ç‡∏ß‡∏≤
    canvasCtx.fillStyle = '#FF6B6B';
    canvasCtx.fillRect(x, y + 5, barWidth, barHeight);
    canvasCtx.fillStyle = '#45B7D1';
    canvasCtx.fillRect(x, y + 5, (rightQuality / 100) * barWidth, barHeight);
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏û‡∏¥‡πÄ‡∏®‡∏©
// ========================================

function drawSuccessEffect() {
    if (!canvasCtx) return;
    
    try {
        // ‡∏ß‡∏≤‡∏î‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ó‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        const centerX = canvasElement.width / 2;
        const centerY = canvasElement.height / 2;
        
        // ‡∏ß‡∏≤‡∏î‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÄ‡∏£‡∏∑‡∏≠‡∏á‡πÅ‡∏™‡∏á
        canvasCtx.save();
        canvasCtx.globalAlpha = 0.7;
        canvasCtx.fillStyle = '#00FF00';
        canvasCtx.beginPath();
        canvasCtx.arc(centerX, centerY, 50, 0, 2 * Math.PI);
        canvasCtx.fill();
        canvasCtx.restore();
        
        // ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        canvasCtx.font = 'bold 24px Kanit, Arial, sans-serif';
        canvasCtx.fillStyle = '#FFFFFF';
        canvasCtx.strokeStyle = '#000000';
        canvasCtx.lineWidth = 3;
        
        const successText = '‚úì ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!';
        const textWidth = canvasCtx.measureText(successText).width;
        const textX = centerX - textWidth / 2;
        const textY = centerY + 8;
        
        canvasCtx.strokeText(successText, textX, textY);
        canvasCtx.fillText(successText, textX, textY);
        
    } catch (error) {
        console.warn('‚ö†Ô∏è Error drawing success effect:', error);
    }
}

function drawMotivationMessage() {
    if (!canvasCtx || movementPhase === 'rest') return;
    
    try {
        const messages = {
            'warmup': ['‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏∏‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß', '‡πÄ‡∏¢‡∏∑‡πà‡∏¢‡∏°! ‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡πÑ‡∏õ'],
            'upper-body': ['‡πÅ‡∏Ç‡∏ô‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!', '‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏î‡∏µ'],
            'trunk': ['‡∏•‡∏≥‡∏ï‡∏±‡∏ß‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô!', '‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô'],
            'lower-body': ['‡∏Ç‡∏≤‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏Ç‡∏∂‡πâ‡∏ô!', '‡∏î‡∏µ‡πÄ‡∏•‡∏¥‡∏®! ‡∏Ç‡∏¢‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏Ñ‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏Ñ‡∏•‡πà‡∏ß']
        };
        
        const categoryMessages = messages[currentCategory] || ['‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡πÑ‡∏õ'];
        const randomMessage = categoryMessages[Math.floor(Math.random() * categoryMessages.length)];
        
        // ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à
        canvasCtx.font = '18px Kanit, Arial, sans-serif';
        canvasCtx.fillStyle = '#FFD700';
        canvasCtx.strokeStyle = '#000000';
        canvasCtx.lineWidth = 2;
        
        const textWidth = canvasCtx.measureText(randomMessage).width;
        const textX = (canvasElement.width - textWidth) / 2;
        const textY = canvasElement.height - 50;
        
        canvasCtx.strokeText(randomMessage, textX, textY);
        canvasCtx.fillText(randomMessage, textX, textY);
        
    } catch (error) {
        console.warn('‚ö†Ô∏è Error drawing motivation message:', error);
    }
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©
// ========================================

function createCompletionEffect() {
    if (!canvasElement) return;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ã‡∏ï
    const effect = document.createElement('div');
    effect.style.position = 'absolute';
    effect.style.top = '50%';
    effect.style.left = '50%';
    effect.style.transform = 'translate(-50%, -50%)';
    effect.style.fontSize = '48px';
    effect.style.color = '#00FF00';
    effect.style.fontWeight = 'bold';
    effect.style.textShadow = '2px 2px 4px rgba(0,0,0,0.5)';
    effect.style.animation = 'fadeInOut 3s ease-in-out';
    effect.style.pointerEvents = 'none';
    effect.style.zIndex = '1000';
    effect.textContent = 'üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! üéâ';
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS animation
    const style = document.createElement('style');
    style.textContent = `
        @keyframes fadeInOut {
            0% { opacity: 0; transform: translate(-50%, -50%) scale(0.5); }
            50% { opacity: 1; transform: translate(-50%, -50%) scale(1.2); }
            100% { opacity: 0; transform: translate(-50%, -50%) scale(1); }
        }
    `;
    document.head.appendChild(style);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏•‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    const container = canvasElement.parentElement;
    if (container) {
        container.style.position = 'relative';
        container.appendChild(effect);
        
        // ‡∏•‡∏ö‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏´‡∏•‡∏±‡∏á 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        setTimeout(() => {
            if (effect.parentElement) {
                effect.parentElement.removeChild(effect);
            }
            if (style.parentElement) {
                style.parentElement.removeChild(style);
            }
        }, 3000);
    }
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
// ========================================

function toggleFullscreen() {
    const videoContainer = document.querySelector('.video-container');
    if (!videoContainer) return;
    
    if (videoContainer.classList.contains('fullscreen-video')) {
        // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
        videoContainer.classList.remove('fullscreen-video');
        const exitButton = videoContainer.querySelector('.fullscreen-exit');
        if (exitButton) {
            exitButton.remove();
        }
    } else {
        // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
        videoContainer.classList.add('fullscreen-video');
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
        const exitButton = document.createElement('div');
        exitButton.className = 'fullscreen-exit';
        exitButton.innerHTML = '<i class="fas fa-times"></i>';
        exitButton.onclick = toggleFullscreen;
        videoContainer.appendChild(exitButton);
    }
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Canvas
// ========================================

function setupCanvasEventListeners() {
    // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
    const fullscreenBtn = document.getElementById('fullscreen-btn');
    if (fullscreenBtn) {
        fullscreenBtn.addEventListener('click', toggleFullscreen);
    }
    
    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà canvas ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    if (canvasElement) {
        canvasElement.addEventListener('click', function(event) {
            const rect = canvasElement.getBoundingClientRect();
            const x = event.clientX - rect.left;
            const y = event.clientY - rect.top;
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å
            console.log(`‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏Å‡∏±‡∏î: (${Math.round(x)}, ${Math.round(y)})`);
            
            // ‡∏≠‡∏≤‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î landmark
        });
    }
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
// ========================================

function resizeCanvas() {
    if (!canvasElement || !videoElement) return;
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î canvas ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    const container = canvasElement.parentElement;
    if (container) {
        const containerWidth = container.clientWidth;
        const containerHeight = container.clientHeight;
        
        if (videoElement.videoWidth > 0 && videoElement.videoHeight > 0) {
            const videoAspectRatio = videoElement.videoWidth / videoElement.videoHeight;
            const containerAspectRatio = containerWidth / containerHeight;
            
            if (videoAspectRatio > containerAspectRatio) {
                // ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Å‡∏ß‡πà‡∏≤ container
                canvasElement.style.width = '100%';
                canvasElement.style.height = 'auto';
            } else {
                // ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ container
                canvasElement.style.width = 'auto';
                canvasElement.style.height = '100%';
            }
        }
    }
}
// ========================================
// ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô Canvas ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ Stroke - Enhanced Version
// canvas-display.js - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°‡∏ö‡∏ô Canvas ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
// ========================================

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏°‡∏∏‡∏°‡∏ö‡∏ô Canvas
let showAnglesOnCanvas = true;
let angleDisplayMode = 'all'; // 'all', 'selected', 'exercise-specific'
let canvasAngleHistory = [];
let maxHistoryLength = 50;

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Canvas
// ========================================

function setupCameraCanvas() {
    if (!canvasElement || !videoElement) {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö canvas ‡∏´‡∏£‡∏∑‡∏≠ video element');
        return;
    }

    console.log('üé® ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Canvas...');

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ video ‡∏û‡∏£‡πâ‡∏≠‡∏°
    const updateCanvasSize = () => {
        if (videoElement.videoWidth > 0 && videoElement.videoHeight > 0) {
            canvasElement.width = videoElement.videoWidth;
            canvasElement.height = videoElement.videoHeight;
            
            // ‡∏õ‡∏£‡∏±‡∏ö CSS ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ‡∏î‡∏µ
            canvasElement.style.width = '100%';
            canvasElement.style.height = 'auto';
            canvasElement.style.maxHeight = '400px';
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°‡∏ö‡∏ô Canvas
            addCanvasControls();
            
            console.log(`‚úÖ Canvas ‡∏Ç‡∏ô‡∏≤‡∏î: ${canvasElement.width}x${canvasElement.height}`);
        } else {
            // ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á 100ms
            setTimeout(updateCanvasSize, 100);
        }
    };
    
    updateCanvasSize();
}

function addCanvasControls() {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (document.getElementById('canvas-angle-controls')) return;
    
    const cameraControls = document.querySelector('.camera-controls');
    if (!cameraControls) return;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
    const controlsHTML = `
        <div id="canvas-angle-controls" class="canvas-controls">
            <button class="btn-icon" id="toggle-canvas-angles" title="‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°‡∏ö‡∏ô Canvas">
                <i class="fas fa-ruler-combined"></i>
            </button>
            <button class="btn-icon" id="change-angle-mode" title="‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°">
                <i class="fas fa-eye"></i>
            </button>
        </div>
    `;
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏•‡∏á‡πÉ‡∏ô camera controls
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = controlsHTML;
    cameraControls.appendChild(tempDiv.firstElementChild);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listeners
    const toggleAnglesBtn = document.getElementById('toggle-canvas-angles');
    const changeModeBtn = document.getElementById('change-angle-mode');
    
    if (toggleAnglesBtn) {
        toggleAnglesBtn.addEventListener('click', toggleCanvasAngles);
    }
    
    if (changeModeBtn) {
        changeModeBtn.addEventListener('click', changeAngleDisplayMode);
    }
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
// ========================================

function drawPoseResults() {
    if (!canvasCtx || !poseResults) return;
    
    try {
        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå canvas
        canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);
        
        // ‡∏ß‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
        if (videoElement && videoElement.videoWidth > 0) {
            canvasCtx.drawImage(videoElement, 0, 0, canvasElement.width, canvasElement.height);
        }
        
        if (poseResults.poseLandmarks) {
            // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏à‡∏∏‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏£‡πà‡∏≤‡∏á
            drawPoseConnections();
            
            // ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡∏≤‡∏°‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            highlightImportantLandmarks();
            
            // ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î landmarks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            drawAllLandmarks();
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°‡∏ö‡∏ô Canvas (‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà)
            if (showAnglesOnCanvas) {
                drawAnglesOnCanvas();
            }
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            drawExerciseInfo();
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á
            drawSideComparisonInfo();
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Error in drawPoseResults:', error);
    }
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°‡∏ö‡∏ô Canvas
// ========================================

function drawAnglesOnCanvas() {
    if (!poseResults.poseLandmarks || !window.realtimeAngleSystem) return;
    
    const landmarks = poseResults.poseLandmarks;
    
    // ‡∏ß‡∏≤‡∏î‡∏°‡∏∏‡∏°‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    switch (angleDisplayMode) {
        case 'all':
            drawAllAnglesOnCanvas(landmarks);
            break;
        case 'selected':
            drawSelectedAnglesOnCanvas(landmarks);
            break;
        case 'exercise-specific':
            drawExerciseSpecificAngles(landmarks);
            break;
    }
    
    // ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏°‡∏∏‡∏°
    drawAngleHistory();
}

function drawAllAnglesOnCanvas(landmarks) {
    const angles = window.realtimeAngleSystem.realtimeAngles;
    
    // ‡∏ß‡∏≤‡∏î‡∏°‡∏∏‡∏°‡πÑ‡∏´‡∏•‡πà
    drawAngleAtJoint(landmarks[11], angles.leftShoulder, '‡πÑ‡∏´‡∏•‡πà‡∏ã‡πâ‡∏≤‡∏¢', '#4ECDC4');
    drawAngleAtJoint(landmarks[12], angles.rightShoulder, '‡πÑ‡∏´‡∏•‡πà‡∏Ç‡∏ß‡∏≤', '#45B7D1');
    
    // ‡∏ß‡∏≤‡∏î‡∏°‡∏∏‡∏°‡∏®‡∏≠‡∏Å
    drawAngleAtJoint(landmarks[13], angles.leftElbow, '‡∏®‡∏≠‡∏Å‡∏ã‡πâ‡∏≤‡∏¢', '#96CEB4');
    drawAngleAtJoint(landmarks[14], angles.rightElbow, '‡∏®‡∏≠‡∏Å‡∏Ç‡∏ß‡∏≤', '#FFEAA7');
    
    // ‡∏ß‡∏≤‡∏î‡∏°‡∏∏‡∏°‡πÄ‡∏Ç‡πà‡∏≤
    drawAngleAtJoint(landmarks[25], angles.leftKnee, '‡πÄ‡∏Ç‡πà‡∏≤‡∏ã‡πâ‡∏≤‡∏¢', '#DDA0DD');
    drawAngleAtJoint(landmarks[26], angles.rightKnee, '‡πÄ‡∏Ç‡πà‡∏≤‡∏Ç‡∏ß‡∏≤', '#F0B27A');
    
    // ‡∏ß‡∏≤‡∏î‡∏°‡∏∏‡∏°‡∏Ñ‡∏≠‡πÅ‡∏•‡∏∞‡∏•‡∏≥‡∏ï‡∏±‡∏ß
    const neckPos = {
        x: (landmarks[7].x + landmarks[8].x) / 2,
        y: (landmarks[7].y + landmarks[8].y) / 2
    };
    drawAngleAtJoint(neckPos, angles.neckTilt, '‡∏Ñ‡∏≠', '#FF6B6B');
    
    const trunkPos = {
        x: (landmarks[11].x + landmarks[12].x) / 2,
        y: (landmarks[11].y + landmarks[12].y) / 2
    };
    drawAngleAtJoint(trunkPos, angles.trunkTilt, '‡∏•‡∏≥‡∏ï‡∏±‡∏ß', '#A8E6CF');
}

function drawSelectedAnglesOnCanvas(landmarks) {
    const angles = window.realtimeAngleSystem.realtimeAngles;
    const detectedSide = autoDetectedSide;
    
    if (detectedSide === 'left' || detectedSide === 'both') {
        drawAngleAtJoint(landmarks[11], angles.leftShoulder, '‡πÑ‡∏´‡∏•‡πà‡∏ã‡πâ‡∏≤‡∏¢', '#4ECDC4');
        drawAngleAtJoint(landmarks[13], angles.leftElbow, '‡∏®‡∏≠‡∏Å‡∏ã‡πâ‡∏≤‡∏¢', '#96CEB4');
        drawAngleAtJoint(landmarks[25], angles.leftKnee, '‡πÄ‡∏Ç‡πà‡∏≤‡∏ã‡πâ‡∏≤‡∏¢', '#DDA0DD');
    }
    
    if (detectedSide === 'right' || detectedSide === 'both') {
        drawAngleAtJoint(landmarks[12], angles.rightShoulder, '‡πÑ‡∏´‡∏•‡πà‡∏Ç‡∏ß‡∏≤', '#45B7D1');
        drawAngleAtJoint(landmarks[14], angles.rightElbow, '‡∏®‡∏≠‡∏Å‡∏Ç‡∏ß‡∏≤', '#FFEAA7');
        drawAngleAtJoint(landmarks[26], angles.rightKnee, '‡πÄ‡∏Ç‡πà‡∏≤‡∏Ç‡∏ß‡∏≤', '#F0B27A');
    }
}

function drawExerciseSpecificAngles(landmarks) {
    if (!currentExercise || !currentCategory) return;
    
    const angles = window.realtimeAngleSystem.realtimeAngles;
    
    switch (currentCategory) {
        case 'warmup':
            drawWarmupAngles(landmarks, angles);
            break;
        case 'upper-body':
            drawUpperBodyAngles(landmarks, angles);
            break;
        case 'trunk':
            drawTrunkAngles(landmarks, angles);
            break;
        case 'lower-body':
            drawLowerBodyAngles(landmarks, angles);
            break;
    }
}

function drawWarmupAngles(landmarks, angles) {
    switch (currentExercise) {
        case 'arm-spread':
            drawAngleAtJoint(landmarks[11], angles.leftShoulder, '‡πÑ‡∏´‡∏•‡πà‡∏ã‡πâ‡∏≤‡∏¢', '#4ECDC4');
            drawAngleAtJoint(landmarks[12], angles.rightShoulder, '‡πÑ‡∏´‡∏•‡πà‡∏Ç‡∏ß‡∏≤', '#45B7D1');
            break;
        case 'neck-flex':
        case 'neck-tilt':
            const neckPos = {
                x: (landmarks[7].x + landmarks[8].x) / 2,
                y: (landmarks[7].y + landmarks[8].y) / 2
            };
            drawAngleAtJoint(neckPos, angles.neckTilt, '‡∏Ñ‡∏≠', '#FF6B6B');
            break;
    }
}

function drawUpperBodyAngles(landmarks, angles) {
    // ‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥
    drawAngleAtJoint(landmarks[11], angles.leftShoulder, '‡πÑ‡∏´‡∏•‡πà‡∏ã‡πâ‡∏≤‡∏¢', '#4ECDC4');
    drawAngleAtJoint(landmarks[12], angles.rightShoulder, '‡πÑ‡∏´‡∏•‡πà‡∏Ç‡∏ß‡∏≤', '#45B7D1');
    drawAngleAtJoint(landmarks[13], angles.leftElbow, '‡∏®‡∏≠‡∏Å‡∏ã‡πâ‡∏≤‡∏¢', '#96CEB4');
    drawAngleAtJoint(landmarks[14], angles.rightElbow, '‡∏®‡∏≠‡∏Å‡∏Ç‡∏ß‡∏≤', '#FFEAA7');
}

function drawTrunkAngles(landmarks, angles) {
    const trunkPos = {
        x: (landmarks[11].x + landmarks[12].x) / 2,
        y: (landmarks[11].y + landmarks[12].y) / 2
    };
    drawAngleAtJoint(trunkPos, angles.trunkTilt, '‡∏•‡∏≥‡∏ï‡∏±‡∏ß', '#A8E6CF');
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏∏‡∏°‡πÑ‡∏´‡∏•‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏∑‡πâ‡∏≠‡∏°
    if (currentExercise.includes('reach')) {
        drawAngleAtJoint(landmarks[11], angles.leftShoulder, '‡πÑ‡∏´‡∏•‡πà‡∏ã‡πâ‡∏≤‡∏¢', '#4ECDC4');
        drawAngleAtJoint(landmarks[12], angles.rightShoulder, '‡πÑ‡∏´‡∏•‡πà‡∏Ç‡∏ß‡∏≤', '#45B7D1');
    }
}

function drawLowerBodyAngles(landmarks, angles) {
    drawAngleAtJoint(landmarks[25], angles.leftKnee, '‡πÄ‡∏Ç‡πà‡∏≤‡∏ã‡πâ‡∏≤‡∏¢', '#DDA0DD');
    drawAngleAtJoint(landmarks[26], angles.rightKnee, '‡πÄ‡∏Ç‡πà‡∏≤‡∏Ç‡∏ß‡∏≤', '#F0B27A');
    drawAngleAtJoint(landmarks[23], angles.leftHip, '‡∏™‡∏∞‡πÇ‡∏û‡∏Å‡∏ã‡πâ‡∏≤‡∏¢', '#FFB6C1');
    drawAngleAtJoint(landmarks[24], angles.rightHip, '‡∏™‡∏∞‡πÇ‡∏û‡∏Å‡∏Ç‡∏ß‡∏≤', '#98FB98');
}

function drawAngleAtJoint(landmark, angle, label, color) {
    if (!landmark || !landmark.visibility || landmark.visibility < 0.5 || angle === 0) return;
    
    try {
        const x = landmark.x * canvasElement.width;
        const y = landmark.y * canvasElement.height;
        
        // ‡∏ß‡∏≤‡∏î‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏£‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏ï‡πà‡∏≠
        canvasCtx.save();
        canvasCtx.beginPath();
        canvasCtx.arc(x, y, 25, 0, 2 * Math.PI);
        canvasCtx.strokeStyle = color;
        canvasCtx.lineWidth = 3;
        canvasCtx.stroke();
        
        // ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        canvasCtx.fillStyle = 'rgba(0, 0, 0, 0.7)';
        canvasCtx.fillRect(x - 35, y - 45, 70, 30);
        
        // ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∏‡∏°
        canvasCtx.fillStyle = color;
        canvasCtx.font = 'bold 14px Kanit, Arial, sans-serif';
        canvasCtx.textAlign = 'center';
        canvasCtx.fillText(`${Math.round(angle)}¬∞`, x, y - 30);
        
        // ‡∏ß‡∏≤‡∏î‡∏õ‡πâ‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏ï‡πà‡∏≠
        canvasCtx.fillStyle = '#FFFFFF';
        canvasCtx.font = '10px Kanit, Arial, sans-serif';
        canvasCtx.fillText(label, x, y - 18);
        
        // ‡∏ß‡∏≤‡∏î‡πÅ‡∏ñ‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏°‡∏∏‡∏°
        drawAngleIndicator(x, y, angle, color);
        
        canvasCtx.restore();
        
        // ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏°‡∏∏‡∏°
        updateAngleHistory(label, angle);
        
    } catch (error) {
        console.warn('‚ö†Ô∏è Error drawing angle at joint:', error);
    }
}

function drawAngleIndicator(x, y, angle, color) {
    const maxAngle = 180;
    const percentage = Math.min(100, (angle / maxAngle) * 100);
    
    // ‡∏ß‡∏≤‡∏î‡πÅ‡∏ñ‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
    canvasCtx.strokeStyle = 'rgba(255, 255, 255, 0.3)';
    canvasCtx.lineWidth = 6;
    canvasCtx.beginPath();
    canvasCtx.arc(x, y, 15, 0, 2 * Math.PI);
    canvasCtx.stroke();
    
    // ‡∏ß‡∏≤‡∏î‡πÅ‡∏ñ‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö
    canvasCtx.strokeStyle = color;
    canvasCtx.lineWidth = 4;
    canvasCtx.beginPath();
    const endAngle = (percentage / 100) * 2 * Math.PI;
    canvasCtx.arc(x, y, 15, -Math.PI / 2, -Math.PI / 2 + endAngle);
    canvasCtx.stroke();
}

function drawAngleHistory() {
    if (canvasAngleHistory.length < 2) return;
    
    try {
        const historyX = canvasElement.width - 150;
        const historyY = 50;
        const historyWidth = 140;
        const historyHeight = 80;
        
        // ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
        canvasCtx.fillStyle = 'rgba(0, 0, 0, 0.7)';
        canvasCtx.fillRect(historyX, historyY, historyWidth, historyHeight);
        
        // ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö
        canvasCtx.strokeStyle = '#FFFFFF';
        canvasCtx.lineWidth = 1;
        canvasCtx.strokeRect(historyX, historyY, historyWidth, historyHeight);
        
        // ‡∏ß‡∏≤‡∏î‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        canvasCtx.fillStyle = '#FFFFFF';
        canvasCtx.font = 'bold 12px Kanit, Arial, sans-serif';
        canvasCtx.textAlign = 'center';
        canvasCtx.fillText('‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏°‡∏∏‡∏°', historyX + historyWidth / 2, historyY + 15);
        
        // ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô
        drawAngleGraph(historyX + 10, historyY + 25, historyWidth - 20, historyHeight - 35);
        
    } catch (error) {
        console.warn('‚ö†Ô∏è Error drawing angle history:', error);
    }
}

function drawAngleGraph(x, y, width, height) {
    if (canvasAngleHistory.length < 2) return;
    
    const maxAngle = Math.max(...canvasAngleHistory.map(item => item.angle));
    const minAngle = Math.min(...canvasAngleHistory.map(item => item.angle));
    const range = maxAngle - minAngle || 1;
    
    canvasCtx.strokeStyle = '#4ECDC4';
    canvasCtx.lineWidth = 2;
    canvasCtx.beginPath();
    
    canvasAngleHistory.forEach((item, index) => {
        const pointX = x + (index / (canvasAngleHistory.length - 1)) * width;
        const pointY = y + height - ((item.angle - minAngle) / range) * height;
        
        if (index === 0) {
            canvasCtx.moveTo(pointX, pointY);
        } else {
            canvasCtx.lineTo(pointX, pointY);
        }
        
        // ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î
        canvasCtx.save();
        canvasCtx.fillStyle = '#4ECDC4';
        canvasCtx.beginPath();
        canvasCtx.arc(pointX, pointY, 2, 0, 2 * Math.PI);
        canvasCtx.fill();
        canvasCtx.restore();
    });
    
    canvasCtx.stroke();
}

function updateAngleHistory(joint, angle) {
    const timestamp = Date.now();
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    canvasAngleHistory.push({
        joint,
        angle,
        timestamp
    });
    
    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (canvasAngleHistory.length > maxHistoryLength) {
        canvasAngleHistory.shift();
    }
    
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    const cutoffTime = timestamp - 10000;
    canvasAngleHistory = canvasAngleHistory.filter(item => item.timestamp > cutoffTime);
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
// ========================================

function toggleCanvasAngles() {
    showAnglesOnCanvas = !showAnglesOnCanvas;
    
    const toggleBtn = document.getElementById('toggle-canvas-angles');
    if (toggleBtn) {
        if (showAnglesOnCanvas) {
            toggleBtn.innerHTML = '<i class="fas fa-ruler-combined"></i>';
            toggleBtn.title = '‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°‡∏ö‡∏ô Canvas';
            toggleBtn.style.backgroundColor = '#4ECDC4';
        } else {
            toggleBtn.innerHTML = '<i class="fas fa-ruler-combined" style="opacity: 0.5;"></i>';
            toggleBtn.title = '‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°‡∏ö‡∏ô Canvas';
            toggleBtn.style.backgroundColor = '';
        }
    }
    
    console.log(`üìä ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°‡∏ö‡∏ô Canvas: ${showAnglesOnCanvas ? '‡πÄ‡∏õ‡∏¥‡∏î' : '‡∏õ‡∏¥‡∏î'}`);
}

function changeAngleDisplayMode() {
    const modes = ['all', 'selected', 'exercise-specific'];
    const currentIndex = modes.indexOf(angleDisplayMode);
    const nextIndex = (currentIndex + 1) % modes.length;
    angleDisplayMode = modes[nextIndex];
    
    const changeModeBtn = document.getElementById('change-angle-mode');
    const modeNames = {
        'all': '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
        'selected': '‡∏Ç‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å',
        'exercise-specific': '‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡πà‡∏≤'
    };
    
    const modeIcons = {
        'all': 'fas fa-eye',
        'selected': 'fas fa-eye-slash',
        'exercise-specific': 'fas fa-crosshairs'
    };
    
    if (changeModeBtn) {
        changeModeBtn.innerHTML = `<i class="${modeIcons[angleDisplayMode]}"></i>`;
        changeModeBtn.title = `‡πÇ‡∏´‡∏°‡∏î: ${modeNames[angleDisplayMode]}`;
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    showFeedback(`‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°: ${modeNames[angleDisplayMode]}`);
    
    console.log(`üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°: ${angleDisplayMode}`);
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏î‡∏¥‡∏° (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
// ========================================

function drawPoseConnections() {
    if (!window.drawConnectors || !window.POSE_CONNECTIONS) return;
    
    try {
        window.drawConnectors(canvasCtx, poseResults.poseLandmarks, 
            window.POSE_CONNECTIONS, {
                color: '#00FF00', 
                lineWidth: 2
            });
    } catch (error) {
        console.warn('‚ö†Ô∏è Error drawing connectors:', error);
    }
}

function drawAllLandmarks() {
    if (!window.drawLandmarks) return;
    
    try {
        window.drawLandmarks(canvasCtx, poseResults.poseLandmarks, {
            color: '#FF0000', 
            lineWidth: 1, 
            radius: 3
        });
    } catch (error) {
        console.warn('‚ö†Ô∏è Error drawing landmarks:', error);
    }
}

function highlightImportantLandmarks() {
    if (!poseResults.poseLandmarks || !window.drawLandmarks || !currentExercise) return;
    
    const landmarks = poseResults.poseLandmarks;
    let highlightIndices = [];
    
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏•‡∏∞‡∏ó‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å
    switch (currentCategory) {
        case 'warmup':
            highlightIndices = getWarmupHighlights();
            break;
        case 'upper-body':
            highlightIndices = getUpperBodyHighlights();
            break;
        case 'trunk':
            highlightIndices = getTrunkHighlights();
            break;
        case 'lower-body':
            highlightIndices = getLowerBodyHighlights();
            break;
    }
    
    // ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå
    const highlightLandmarks = highlightIndices
        .map(index => landmarks[index])
        .filter(landmark => landmark && landmark.visibility > 0.5);
    
    if (highlightLandmarks.length > 0) {
        try {
            // ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
            window.drawLandmarks(canvasCtx, highlightLandmarks, {
                color: '#FFFF00', 
                lineWidth: 3, 
                radius: 6
            });
            
            // ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
            drawActiveSideHighlights(landmarks, highlightIndices);
        } catch (error) {
            console.warn('‚ö†Ô∏è Error highlighting landmarks:', error);
        }
    }
}

function getWarmupHighlights() {
    switch (currentExercise) {
        case 'arm-spread':
            return [11, 12, 13, 14, 15, 16];
        case 'neck-flex':
            return [0, 9, 10];
        case 'neck-tilt':
            return [0, 7, 8];
        default:
            return [];
    }
}

function getUpperBodyHighlights() {
    switch (currentExercise) {
        case 'shoulder-shrug':
            return [11, 12, 23, 24];
        case 'hand-grip-side':
        case 'hand-grip-front':
        case 'finger-touch':
            return [15, 16];
        case 'arm-overhead':
        case 'elbow-flex':
            return [11, 12, 13, 14, 15, 16];
        case 'wrist-rotation':
            return [13, 14, 15, 16];
        default:
            return [];
    }
}

function getTrunkHighlights() {
    switch (currentExercise) {
        case 'trunk-sway':
        case 'back-extension':
            return [11, 12, 23, 24];
        case 'trunk-reach':
        case 'side-reach':
            return [11, 12, 13, 14, 15, 16];
        case 'trunk-reach-floor':
            return [11, 12, 15, 16, 23, 24];
        default:
            return [];
    }
}

function getLowerBodyHighlights() {
    switch (currentExercise) {
        case 'hip-shift':
            return [23, 24];
        case 'leg-abduction':
        case 'leg-together':
            return [25, 26];
        case 'leg-forward':
        case 'knee-extension':
            return [23, 24, 25, 26, 27, 28];
        default:
            return [];
    }
}

function drawActiveSideHighlights(landmarks, highlightIndices) {
    // ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
    const leftQuality = bothSidesData.left.totalQuality || 0;
    const rightQuality = bothSidesData.right.totalQuality || 0;
    
    let activeSideColor = '#FF6B6B';
    let activeIndices = [];
    
    if (leftQuality > rightQuality + 10) {
        activeSideColor = '#4ECDC4';
        activeIndices = highlightIndices.filter(index => [11, 13, 15, 23, 25, 27].includes(index));
    } else if (rightQuality > leftQuality + 10) {
        activeSideColor = '#45B7D1';
        activeIndices = highlightIndices.filter(index => [12, 14, 16, 24, 26, 28].includes(index));
    }
    
    if (activeIndices.length > 0) {
        const activeLandmarks = activeIndices
            .map(index => landmarks[index])
            .filter(landmark => landmark && landmark.visibility > 0.6);
        
        if (activeLandmarks.length > 0) {
            try {
                window.drawLandmarks(canvasCtx, activeLandmarks, {
                    color: activeSideColor,
                    lineWidth: 4,
                    radius: 8
                });
            } catch (error) {
                console.warn('‚ö†Ô∏è Error drawing active side highlights:', error);
            }
        }
    }
}

function drawExerciseInfo() {
    if (!canvasCtx) return;
    
    try {
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏µ
        canvasCtx.font = '16px Kanit, Arial, sans-serif';
        canvasCtx.fillStyle = '#FFFFFF';
        canvasCtx.strokeStyle = '#000000';
        canvasCtx.lineWidth = 3;
        
        let yPosition = 30;
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ù‡∏∂‡∏Å
        if (currentExercise) {
            const exerciseText = `‡∏ó‡πà‡∏≤: ${getExerciseName(currentExercise)}`;
            drawTextWithOutline(exerciseText, 10, yPosition);
            yPosition += 25;
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ
        const sideText = getAutoDetectionText();
        drawTextWithOutline(sideText, 10, yPosition);
        yPosition += 25;
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (currentAngle > 0 && movementPhase !== 'rest') {
            const angleText = `‡∏°‡∏∏‡∏°: ${Math.round(currentAngle)}¬∞`;
            drawTextWithOutline(angleText, 10, yPosition);
            yPosition += 25;
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ü‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
        if (movementPhase !== 'rest') {
            const phaseText = `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${getPhaseDisplayName(movementPhase)}`;
            drawTextWithOutline(phaseText, 10, yPosition);
            yPosition += 25;
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏î‡πâ
        if (repCounter > 0) {
            const repText = `‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà: ${repCounter}/${targetReps}`;
            drawTextWithOutline(repText, 10, yPosition);
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°
        if (showAnglesOnCanvas) {
            const modeNames = {
                'all': '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                'selected': '‡∏Ç‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å',
                'exercise-specific': '‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡πà‡∏≤'
            };
            const modeText = `‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°: ${modeNames[angleDisplayMode]}`;
            canvasCtx.fillStyle = '#FFD700';
            drawTextWithOutline(modeText, 10, canvasElement.height - 20);
        }
        
    } catch (error) {
        console.warn('‚ö†Ô∏è Error drawing exercise info:', error);
    }
}

function drawTextWithOutline(text, x, y) {
    // ‡∏ß‡∏≤‡∏î‡∏Ç‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏µ‡∏î‡∏≥
    canvasCtx.strokeText(text, x, y);
    // ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
    canvasCtx.fillText(text, x, y);
}

function getAutoDetectionText() {
    const leftQuality = bothSidesData.left.totalQuality || 0;
    const rightQuality = bothSidesData.right.totalQuality || 0;
    
    if (leftQuality > rightQuality + 15) {
        return '‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: ‡∏Ç‡πâ‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢ (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)';
    } else if (rightQuality > leftQuality + 15) {
        return '‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: ‡∏Ç‡πâ‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤ (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)';
    } else {
        return '‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á';
    }
}

function getPhaseDisplayName(phase) {
    const phaseNames = {
        'lifting': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏Å',
        'lowering': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏î',
        'flexing': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏á‡∏≠',
        'extending': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î',
        'spreading': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏á',
        'closing': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏∏‡∏ö',
        'reaching': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏≠‡∏∑‡πâ‡∏≠‡∏°',
        'bending': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡πâ‡∏°',
        'tilting': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏≠‡∏µ‡∏¢‡∏á',
        'shrugging': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏±‡∏Å‡πÑ‡∏´‡∏•‡πà',
        'gripping': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≥-‡πÅ‡∏ö‡∏°‡∏∑‡∏≠',
        'rotating': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏°‡∏∏‡∏ô',
        'touching': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏ï‡∏∞',
        'swaying': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏¢‡∏Å',
        'shifting': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏Å',
        'stepping': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡πâ‡∏≤‡∏ß',
        'abducting': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏á',
        'holding': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏á‡∏ó‡πà‡∏≤',
        'returning': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°'
    };
    return phaseNames[phase] || phase;
}

function drawSideComparisonInfo() {
    if (!canvasCtx) return;
    
    try {
        // ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô
        const boxWidth = 200;
        const boxHeight = 100;
        const boxX = canvasElement.width - boxWidth - 10;
        const boxY = 10;
        
        // ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
        canvasCtx.fillStyle = 'rgba(0, 0, 0, 0.7)';
        canvasCtx.fillRect(boxX, boxY, boxWidth, boxHeight);
        
        // ‡∏ß‡∏≤‡∏î‡∏Ç‡∏≠‡∏ö
        canvasCtx.strokeStyle = '#FFFFFF';
        canvasCtx.lineWidth = 2;
        canvasCtx.strokeRect(boxX, boxY, boxWidth, boxHeight);
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå
        canvasCtx.font = '14px Kanit, Arial, sans-serif';
        canvasCtx.fillStyle = '#FFFFFF';
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á
        const leftQuality = Math.round(bothSidesData.left.totalQuality || 0);
        const rightQuality = Math.round(bothSidesData.right.totalQuality || 0);
        
        canvasCtx.fillText('‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö:', boxX + 5, boxY + 20);
        canvasCtx.fillText(`‡∏ã‡πâ‡∏≤‡∏¢: ${leftQuality}%`, boxX + 5, boxY + 40);
        canvasCtx.fillText(`‡∏Ç‡∏ß‡∏≤: ${rightQuality}%`, boxX + 5, boxY + 60);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°
        if (showAnglesOnCanvas) {
            const modeNames = {
                'all': '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                'selected': '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å',
                'exercise-specific': '‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡πà‡∏≤'
            };
            canvasCtx.fillText(`‡πÇ‡∏´‡∏°‡∏î: ${modeNames[angleDisplayMode]}`, boxX + 5, boxY + 80);
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ñ‡∏ö‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
        drawQualityBars(boxX + 80, boxY + 35, leftQuality, rightQuality);
        
    } catch (error) {
        console.warn('‚ö†Ô∏è Error drawing side comparison:', error);
    }
}

function drawQualityBars(x, y, leftQuality, rightQuality) {
    const barWidth = 100;
    const barHeight = 8;
    
    // ‡πÅ‡∏ñ‡∏ö‡∏ã‡πâ‡∏≤‡∏¢
    canvasCtx.fillStyle = '#FF6B6B';
    canvasCtx.fillRect(x, y - 15, barWidth, barHeight);
    canvasCtx.fillStyle = '#4ECDC4';
    canvasCtx.fillRect(x, y - 15, (leftQuality / 100) * barWidth, barHeight);
    
    // ‡πÅ‡∏ñ‡∏ö‡∏Ç‡∏ß‡∏≤
    canvasCtx.fillStyle = '#FF6B6B';
    canvasCtx.fillRect(x, y + 5, barWidth, barHeight);
    canvasCtx.fillStyle = '#45B7D1';
    canvasCtx.fillRect(x, y + 5, (rightQuality / 100) * barWidth, barHeight);
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏û‡∏¥‡πÄ‡∏®‡∏©
// ========================================

function drawSuccessEffect() {
    if (!canvasCtx) return;
    
    try {
        // ‡∏ß‡∏≤‡∏î‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ó‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        const centerX = canvasElement.width / 2;
        const centerY = canvasElement.height / 2;
        
        // ‡∏ß‡∏≤‡∏î‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÄ‡∏£‡∏∑‡∏≠‡∏á‡πÅ‡∏™‡∏á
        canvasCtx.save();
        canvasCtx.globalAlpha = 0.7;
        canvasCtx.fillStyle = '#00FF00';
        canvasCtx.beginPath();
        canvasCtx.arc(centerX, centerY, 50, 0, 2 * Math.PI);
        canvasCtx.fill();
        canvasCtx.restore();
        
        // ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        canvasCtx.font = 'bold 24px Kanit, Arial, sans-serif';
        canvasCtx.fillStyle = '#FFFFFF';
        canvasCtx.strokeStyle = '#000000';
        canvasCtx.lineWidth = 3;
        
        const successText = '‚úì ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!';
        const textWidth = canvasCtx.measureText(successText).width;
        const textX = centerX - textWidth / 2;
        const textY = centerY + 8;
        
        canvasCtx.strokeText(successText, textX, textY);
        canvasCtx.fillText(successText, textX, textY);
        
    } catch (error) {
        console.warn('‚ö†Ô∏è Error drawing success effect:', error);
    }
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
// ========================================

function resizeCanvas() {
    if (!canvasElement || !videoElement) return;
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î canvas ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    const container = canvasElement.parentElement;
    if (container) {
        const containerWidth = container.clientWidth;
        const containerHeight = container.clientHeight;
        
        if (videoElement.videoWidth > 0 && videoElement.videoHeight > 0) {
            const videoAspectRatio = videoElement.videoWidth / videoElement.videoHeight;
            const containerAspectRatio = containerWidth / containerHeight;
            
            if (videoAspectRatio > containerAspectRatio) {
                // ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Å‡∏ß‡πà‡∏≤ container
                canvasElement.style.width = '100%';
                canvasElement.style.height = 'auto';
            } else {
                // ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ container
                canvasElement.style.width = 'auto';
                canvasElement.style.height = '100%';
            }
        }
    }
}

function toggleFullscreen() {
    const videoContainer = document.querySelector('.video-container');
    if (!videoContainer) return;
    
    if (videoContainer.classList.contains('fullscreen-video')) {
        // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
        videoContainer.classList.remove('fullscreen-video');
        const exitButton = videoContainer.querySelector('.fullscreen-exit');
        if (exitButton) {
            exitButton.remove();
        }
    } else {
        // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
        videoContainer.classList.add('fullscreen-video');
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
        const exitButton = document.createElement('div');
        exitButton.className = 'fullscreen-exit';
        exitButton.innerHTML = '<i class="fas fa-times"></i>';
        exitButton.onclick = toggleFullscreen;
        videoContainer.appendChild(exitButton);
    }
}

function setupCanvasEventListeners() {
    // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
    const fullscreenBtn = document.getElementById('fullscreen-btn');
    if (fullscreenBtn) {
        fullscreenBtn.addEventListener('click', toggleFullscreen);
    }
    
    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà canvas ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    if (canvasElement) {
        canvasElement.addEventListener('click', function(event) {
            const rect = canvasElement.getBoundingClientRect();
            const x = event.clientX - rect.left;
            const y = event.clientY - rect.top;
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å
            console.log(`‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏Å‡∏±‡∏î: (${Math.round(x)}, ${Math.round(y)})`);
            
            // ‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ö‡∏ô canvas (double click)
            if (event.detail === 2) { // double click
                toggleCanvasAngles();
            }
        });
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° context menu ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        canvasElement.addEventListener('contextmenu', function(event) {
            event.preventDefault();
            showCanvasContextMenu(event.clientX, event.clientY);
        });
    }
}

function showCanvasContextMenu(x, y) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á context menu
    const existingMenu = document.getElementById('canvas-context-menu');
    if (existingMenu) {
        existingMenu.remove();
    }
    
    const menu = document.createElement('div');
    menu.id = 'canvas-context-menu';
    menu.style.cssText = `
        position: fixed;
        left: ${x}px;
        top: ${y}px;
        background: white;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        z-index: 1000;
        padding: 5px 0;
        min-width: 150px;
    `;
    
    const menuItems = [
        {
            text: showAnglesOnCanvas ? '‡∏ã‡πà‡∏≠‡∏ô‡∏°‡∏∏‡∏°' : '‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°',
            action: toggleCanvasAngles
        },
        {
            text: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î',
            action: changeAngleDisplayMode
        },
        {
            text: '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥',
            action: () => { canvasAngleHistory = []; }
        }
    ];
    
    menuItems.forEach(item => {
        const menuItem = document.createElement('div');
        menuItem.textContent = item.text;
        menuItem.style.cssText = `
            padding: 8px 15px;
            cursor: pointer;
            font-size: 14px;
        `;
        menuItem.addEventListener('mouseenter', () => {
            menuItem.style.backgroundColor = '#f0f0f0';
        });
        menuItem.addEventListener('mouseleave', () => {
            menuItem.style.backgroundColor = '';
        });
        menuItem.addEventListener('click', () => {
            item.action();
            menu.remove();
        });
        menu.appendChild(menuItem);
    });
    
    document.body.appendChild(menu);
    
    // ‡∏õ‡∏¥‡∏î menu ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å
    setTimeout(() => {
        document.addEventListener('click', function closeMenu() {
            menu.remove();
            document.removeEventListener('click', closeMenu);
        });
    }, 100);
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
// ========================================

function exportCanvasAsImage() {
    if (!canvasElement) return null;
    
    try {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å canvas
        const imageData = canvasElement.toDataURL('image/png');
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
        const link = document.createElement('a');
        link.download = `stroke-exercise-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.png`;
        link.href = imageData;
        
        return { link, imageData };
    } catch (error) {
        console.error('‚ùå Error exporting canvas:', error);
        return null;
    }
}

function saveCanvasSnapshot() {
    const exported = exportCanvasAsImage();
    if (exported) {
        exported.link.click();
        showFeedback('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
    } else {
        showFeedback('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ', 'error');
    }
}

// ========================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö
// ========================================

function initializeEnhancedCanvasDisplay() {
    console.log('üé® ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Enhanced Canvas Display...');
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event listeners
    setupCanvasEventListeners();
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°
    showAnglesOnCanvas = true;
    angleDisplayMode = 'exercise-specific';
    
    console.log('‚úÖ Enhanced Canvas Display ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
}

function cleanupCanvasDisplay() {
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
    canvasAngleHistory = [];
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    showAnglesOnCanvas = true;
    angleDisplayMode = 'all';
    
    // ‡∏•‡∏ö context menu ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
    const existingMenu = document.getElementById('canvas-context-menu');
    if (existingMenu) {
        existingMenu.remove();
    }
    
    console.log('üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Canvas Display ‡πÅ‡∏•‡πâ‡∏ß');
}

// ========================================
// ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á global scope
// ========================================

window.enhancedCanvasSystem = {
    setupCameraCanvas,
    toggleCanvasAngles,
    changeAngleDisplayMode,
    exportCanvasAsImage,
    saveCanvasSnapshot,
    initializeEnhancedCanvasDisplay,
    cleanupCanvasDisplay,
    showAnglesOnCanvas,
    angleDisplayMode
};

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
window.addEventListener('resize', resizeCanvas);

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô setup ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
document.addEventListener('DOMContentLoaded', function() {
    initializeEnhancedCanvasDisplay();
});

console.log('‚úÖ Enhanced canvas-display.js ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ - ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°‡∏ö‡∏ô Canvas ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
window.addEventListener('resize', resizeCanvas);

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô setup ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
document.addEventListener('DOMContentLoaded', function() {
    setupCanvasEventListeners();
});

console.log('‚úÖ canvas-display.js ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ - ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô Canvas ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');